import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:timezone/data/latest_all.dart' as tz;
import 'package:timezone/timezone.dart' as tz;
import 'package:flutter/material.dart';
import 'dart:io';

class PushNotificationService {
  static final PushNotificationService _instance =
      PushNotificationService._internal();
  factory PushNotificationService() => _instance;
  PushNotificationService._internal();

  final FlutterLocalNotificationsPlugin _notifications =
      FlutterLocalNotificationsPlugin();

  bool _isInitialized = false;

  /// Inicializa o servi√ßo de notifica√ß√µes
  Future<void> initialize() async {
    if (_isInitialized) return;

    // Inicializar timezone
    tz.initializeTimeZones();
    tz.setLocalLocation(tz.getLocation('America/Sao_Paulo'));

    // Configura√ß√µes para Android
    const AndroidInitializationSettings androidSettings =
        AndroidInitializationSettings('@mipmap/ic_launcher');

    // Configura√ß√µes para iOS
    const DarwinInitializationSettings iosSettings =
        DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
    );

    // Configura√ß√µes gerais
    const InitializationSettings settings = InitializationSettings(
      android: androidSettings,
      iOS: iosSettings,
    );

    // Inicializar o plugin
    await _notifications.initialize(
      settings,
      onDidReceiveNotificationResponse: _onNotificationTapped,
    );

    // Solicitar permiss√µes
    await _requestPermissions();

    _isInitialized = true;
    debugPrint('‚úÖ Servi√ßo de notifica√ß√µes push inicializado');
  }

  /// Solicita permiss√µes necess√°rias
  Future<void> _requestPermissions() async {
    if (Platform.isAndroid) {
      // Android 13+ precisa de permiss√£o expl√≠cita
      await Permission.notification.request();

      // Para notifica√ß√µes exatas (alarmes)
      if (await Permission.scheduleExactAlarm.isDenied) {
        await Permission.scheduleExactAlarm.request();
      }
    }

    if (Platform.isIOS) {
      await _notifications
          .resolvePlatformSpecificImplementation<
              IOSFlutterLocalNotificationsPlugin>()
          ?.requestPermissions(
            alert: true,
            badge: true,
            sound: true,
          );
    }
  }

  /// Callback quando notifica√ß√£o √© tocada
  void _onNotificationTapped(NotificationResponse response) {
    debugPrint('Notifica√ß√£o tocada: ${response.payload}');
    // Aqui voc√™ pode navegar para uma tela espec√≠fica baseada no payload
    // Exemplo: NavigationService.navigateTo(response.payload);
  }

  /// Mostra uma notifica√ß√£o imediata
  Future<void> showNotification({
    required int id,
    required String title,
    required String body,
    String? payload,
    // CORRIGIDO: Removido NotificationPriority que n√£o existe mais
    String? channelId,
    String? channelName,
  }) async {
    if (!_isInitialized) {
      await initialize();
    }

    final androidDetails = AndroidNotificationDetails(
      channelId ?? 'economize_default',
      channelName ?? 'Economize Notifica√ß√µes',
      channelDescription: 'Notifica√ß√µes do app Economize',
      importance: Importance.high,
      priority: Priority.high,
      showWhen: true,
      icon: '@mipmap/ic_launcher',
      color: const Color(0xFF6200EE), // Cor do seu app
      enableVibration: true,
      playSound: true,
    );

    const iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
    );

    final details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    await _notifications.show(
      id,
      title,
      body,
      details,
      payload: payload,
    );

    debugPrint('üì± Notifica√ß√£o enviada: $title');
  }

  /// Agenda uma notifica√ß√£o para um momento espec√≠fico
  Future<void> scheduleNotification({
    required int id,
    required String title,
    required String body,
    required DateTime scheduledDate,
    String? payload,
    String? channelId,
    String? channelName,
  }) async {
    if (!_isInitialized) {
      await initialize();
    }

    // Converter para timezone local
    final tz.TZDateTime scheduledTZ =
        tz.TZDateTime.from(scheduledDate, tz.local);

    // Verificar se a data √© no futuro
    if (scheduledTZ.isBefore(tz.TZDateTime.now(tz.local))) {
      debugPrint(
          '‚ö†Ô∏è Tentativa de agendar notifica√ß√£o no passado: $scheduledDate');
      return;
    }

    final androidDetails = AndroidNotificationDetails(
      channelId ?? 'economize_payments',
      channelName ?? 'Economize Pagamentos',
      channelDescription: 'Lembretes de pagamentos e vencimentos',
      importance: Importance.max,
      priority: Priority.high,
      showWhen: true,
      icon: '@mipmap/ic_launcher',
      color: const Color(0xFF6200EE),
      enableVibration: true,
      playSound: true,
      // Configura√ß√µes para aparecer na tela de bloqueio
      fullScreenIntent: true,
      category: AndroidNotificationCategory.alarm,
    );

    const iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
      interruptionLevel: InterruptionLevel.timeSensitive,
    );

    final details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    await _notifications.zonedSchedule(
      id,
      title,
      body,
      scheduledTZ,
      details,
      payload: payload,
      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      // CORRIGIDO: Removido par√¢metro que n√£o existe mais
    );

    debugPrint('‚è∞ Notifica√ß√£o agendada para: $scheduledDate - $title');
  }

  /// Agenda notifica√ß√µes recorrentes (ex: toda semana)
  Future<void> scheduleRepeatingNotification({
    required int id,
    required String title,
    required String body,
    required RepeatInterval repeatInterval,
    String? payload,
  }) async {
    if (!_isInitialized) {
      await initialize();
    }

    const androidDetails = AndroidNotificationDetails(
      'economize_recurring',
      'Economize Recorrentes',
      channelDescription: 'Lembretes recorrentes',
      importance: Importance.high,
      priority: Priority.high,
    );

    const iosDetails = DarwinNotificationDetails();

    const details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    // CORRIGIDO: Adicionado par√¢metro obrigat√≥rio androidScheduleMode
    await _notifications.periodicallyShow(
      id,
      title,
      body,
      repeatInterval,
      details,
      androidScheduleMode:
          AndroidScheduleMode.exactAllowWhileIdle, // ADICIONADO
      payload: payload,
    );

    debugPrint('üîÑ Notifica√ß√£o recorrente agendada: $title');
  }

  /// Cancela uma notifica√ß√£o espec√≠fica
  Future<void> cancelNotification(int id) async {
    await _notifications.cancel(id);
    debugPrint('‚ùå Notifica√ß√£o cancelada: $id');
  }

  /// Cancela todas as notifica√ß√µes
  Future<void> cancelAllNotifications() async {
    await _notifications.cancelAll();
    debugPrint('‚ùå Todas as notifica√ß√µes canceladas');
  }

  /// Lista todas as notifica√ß√µes pendentes
  Future<List<PendingNotificationRequest>> getPendingNotifications() async {
    return await _notifications.pendingNotificationRequests();
  }

  /// Verifica se as notifica√ß√µes est√£o habilitadas
  Future<bool> areNotificationsEnabled() async {
    if (Platform.isAndroid) {
      return await Permission.notification.isGranted;
    }
    return true; // iOS geralmente permite durante a inicializa√ß√£o
  }

  /// Mostra configura√ß√µes de notifica√ß√£o do sistema
  Future<void> openNotificationSettings() async {
    await openAppSettings();
  }
}
