import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:timezone/data/latest_all.dart' as tz;
import 'package:timezone/timezone.dart' as tz;
import 'package:flutter/material.dart';
import 'dart:io';

class PushNotificationService {
  static final PushNotificationService _instance =
      PushNotificationService._internal();
  factory PushNotificationService() => _instance;
  PushNotificationService._internal();

  final FlutterLocalNotificationsPlugin _notifications =
      FlutterLocalNotificationsPlugin();

  bool _isInitialized = false;

  /// Inicializa o servi√ßo de notifica√ß√µes
  Future<void> initialize() async {
    if (_isInitialized) return;

    // Inicializar timezone
    tz.initializeTimeZones();
    tz.setLocalLocation(tz.getLocation('America/Sao_Paulo'));

    // ADICIONADO: Criar canal de notifica√ß√£o para Android
    if (Platform.isAndroid) {
      await _createNotificationChannels();
    }

    // Configura√ß√µes para Android
    const AndroidInitializationSettings androidSettings =
        AndroidInitializationSettings('@mipmap/ic_launcher');

    // Configura√ß√µes para iOS
    const DarwinInitializationSettings iosSettings =
        DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
    );

    // Configura√ß√µes gerais
    const InitializationSettings settings = InitializationSettings(
      android: androidSettings,
      iOS: iosSettings,
    );

    // Inicializar o plugin
    await _notifications.initialize(
      settings,
      onDidReceiveNotificationResponse: _onNotificationTapped,
    );

    // Solicitar permiss√µes
    await _requestPermissions();

    _isInitialized = true;
    debugPrint('‚úÖ Servi√ßo de notifica√ß√µes push inicializado');
  }

  /// ADICIONADO: Criar canais de notifica√ß√£o para Android
  Future<void> _createNotificationChannels() async {
    final List<AndroidNotificationChannel> channels = [
      const AndroidNotificationChannel(
        'economize_high_importance',
        'Lembretes Importantes',
        description: 'Notifica√ß√µes importantes do Economize',
        importance: Importance.max,
        enableVibration: true,
        playSound: true,
        showBadge: true,
      ),
      const AndroidNotificationChannel(
        'economize_payments',
        'Lembretes de Pagamento',
        description: 'Lembretes de vencimento de contas',
        importance: Importance.high,
        enableVibration: true,
        playSound: true,
        showBadge: true,
      ),
      const AndroidNotificationChannel(
        'economize_default',
        'Notifica√ß√µes Gerais',
        description: 'Notifica√ß√µes gerais do Economize',
        importance: Importance.defaultImportance,
        enableVibration: true,
        playSound: true,
      ),
    ];

    for (final channel in channels) {
      await _notifications
          .resolvePlatformSpecificImplementation<
              AndroidFlutterLocalNotificationsPlugin>()
          ?.createNotificationChannel(channel);
    }
  }

  /// ATUALIZADO: Solicita permiss√µes necess√°rias com configura√ß√µes espec√≠ficas para Android 12+
  Future<void> _requestPermissions() async {
    if (Platform.isAndroid) {
      // Android 13+ precisa de permiss√£o expl√≠cita para notifica√ß√µes
      final notificationStatus = await Permission.notification.request();

      // Para notifica√ß√µes exatas (importante para lembretes)
      final exactAlarmStatus = await Permission.scheduleExactAlarm.request();

      // ADICIONADO: Para Android 12+ - ignorar otimiza√ß√µes de bateria
      if (Platform.isAndroid) {
        final ignoreBatteryOptimization =
            await Permission.ignoreBatteryOptimizations.request();
        debugPrint(
            'Permiss√£o para ignorar otimiza√ß√£o de bateria: $ignoreBatteryOptimization');
      }

      debugPrint('Permiss√£o de notifica√ß√£o: $notificationStatus');
      debugPrint('Permiss√£o de alarme exato: $exactAlarmStatus');
    }

    if (Platform.isIOS) {
      await _notifications
          .resolvePlatformSpecificImplementation<
              IOSFlutterLocalNotificationsPlugin>()
          ?.requestPermissions(
            alert: true,
            badge: true,
            sound: true,
          );
    }
  }

  /// Callback quando notifica√ß√£o √© tocada
  void _onNotificationTapped(NotificationResponse response) {
    debugPrint('Notifica√ß√£o tocada: ${response.payload}');
    // Aqui voc√™ pode navegar para uma tela espec√≠fica baseada no payload
    // Exemplo: NavigationService.navigateTo(response.payload);
  }

  /// ATUALIZADO: Mostra uma notifica√ß√£o imediata com configura√ß√µes otimizadas
  Future<void> showNotification({
    required int id,
    required String title,
    required String body,
    String? payload,
    String? channelId,
    String? channelName,
  }) async {
    if (!_isInitialized) {
      await initialize();
    }

    final androidDetails = AndroidNotificationDetails(
      channelId ?? 'economize_high_importance',
      channelName ?? 'Lembretes Importantes',
      channelDescription: 'Notifica√ß√µes importantes do app Economize',
      importance: Importance.max,
      priority: Priority.max,
      showWhen: true,
      icon: '@mipmap/ic_launcher',
      color: const Color(0xFF6200EE),
      enableVibration: true,
      playSound: true,
      autoCancel: false,
      ongoing: false,
      fullScreenIntent: true,
      category: AndroidNotificationCategory.reminder,
      visibility: NotificationVisibility.public,
    );

    const iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
      interruptionLevel: InterruptionLevel.timeSensitive,
    );

    final details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    await _notifications.show(
      id,
      title,
      body,
      details,
      payload: payload,
    );

    debugPrint('üì± Notifica√ß√£o enviada: $title');
  }

  /// CORRIGIDO: Agenda uma notifica√ß√£o para um momento espec√≠fico
  Future<void> scheduleNotification({
    required int id,
    required String title,
    required String body,
    required DateTime scheduledDate,
    String? payload,
    String? channelId,
    String? channelName,
  }) async {
    if (!_isInitialized) {
      await initialize();
    }

    // Converter para timezone local
    final tz.TZDateTime scheduledTZ =
        tz.TZDateTime.from(scheduledDate, tz.local);

    // Verificar se a data √© no futuro
    if (scheduledTZ.isBefore(tz.TZDateTime.now(tz.local))) {
      debugPrint(
          '‚ö†Ô∏è Tentativa de agendar notifica√ß√£o no passado: $scheduledDate');
      return;
    }

    final androidDetails = AndroidNotificationDetails(
      channelId ?? 'economize_payments',
      channelName ?? 'Lembretes de Pagamento',
      channelDescription: 'Lembretes de vencimentos e pagamentos',
      importance: Importance.max,
      priority: Priority.max,
      showWhen: true,
      icon: '@mipmap/ic_launcher',
      color: const Color(0xFF6200EE),
      enableVibration: true,
      playSound: true,
      fullScreenIntent: true,
      category: AndroidNotificationCategory.alarm,
      visibility: NotificationVisibility.public,
      autoCancel: false,
      ongoing: false,
    );

    const iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
      interruptionLevel: InterruptionLevel.timeSensitive,
    );

    final details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    // CORRIGIDO: Removido par√¢metro obsoleto
    await _notifications.zonedSchedule(
      id,
      title,
      body,
      scheduledTZ,
      details,
      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      payload: payload,
    );

    debugPrint('‚è∞ Notifica√ß√£o agendada para: $scheduledDate - $title');
  }

  /// CORRIGIDO: Agenda notifica√ß√µes recorrentes
  Future<void> scheduleRepeatingNotification({
    required int id,
    required String title,
    required String body,
    required RepeatInterval repeatInterval,
    String? payload,
  }) async {
    if (!_isInitialized) {
      await initialize();
    }

    const androidDetails = AndroidNotificationDetails(
      'economize_recurring',
      'Economize Recorrentes',
      channelDescription: 'Lembretes recorrentes',
      importance: Importance.high,
      priority: Priority.high,
    );

    const iosDetails = DarwinNotificationDetails();

    const details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    // CORRIGIDO: Adicionado par√¢metro androidScheduleMode obrigat√≥rio
    await _notifications.periodicallyShow(
      id,
      title,
      body,
      repeatInterval,
      details,
      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      payload: payload,
    );

    debugPrint('üîÑ Notifica√ß√£o recorrente agendada: $title');
  }

  /// Cancela uma notifica√ß√£o espec√≠fica
  Future<void> cancelNotification(int id) async {
    await _notifications.cancel(id);
    debugPrint('‚ùå Notifica√ß√£o cancelada: $id');
  }

  /// Cancela todas as notifica√ß√µes
  Future<void> cancelAllNotifications() async {
    await _notifications.cancelAll();
    debugPrint('‚ùå Todas as notifica√ß√µes canceladas');
  }

  /// Lista todas as notifica√ß√µes pendentes
  Future<List<PendingNotificationRequest>> getPendingNotifications() async {
    return await _notifications.pendingNotificationRequests();
  }

  /// ATUALIZADO: Verifica se todas as permiss√µes necess√°rias est√£o concedidas
  Future<bool> areNotificationsEnabled() async {
    if (Platform.isAndroid) {
      final notification = await Permission.notification.isGranted;
      final exactAlarm = await Permission.scheduleExactAlarm.isGranted;

      debugPrint('Notifica√ß√£o habilitada: $notification');
      debugPrint('Alarme exato habilitado: $exactAlarm');

      return notification && exactAlarm;
    }
    return true;
  }

  /// Mostra configura√ß√µes de notifica√ß√£o do sistema
  Future<void> openNotificationSettings() async {
    await openAppSettings();
  }

  /// ADICIONADO: M√©todo para testar notifica√ß√£o imediata
  Future<void> testNotification() async {
    await showNotification(
      id: 999,
      title: 'Teste de Notifica√ß√£o',
      body: 'Se voc√™ viu isso, as notifica√ß√µes est√£o funcionando!',
      payload: 'test',
    );
  }

  /// ADICIONADO: M√©todo para agendar notifica√ß√£o de teste em 10 segundos
  Future<void> testScheduledNotification() async {
    final testDate = DateTime.now().add(const Duration(seconds: 10));

    await scheduleNotification(
      id: 998,
      title: 'Teste Agendamento',
      body: 'Esta notifica√ß√£o foi agendada para 10 segundos!',
      scheduledDate: testDate,
      payload: 'test_scheduled',
    );

    debugPrint('üß™ Notifica√ß√£o de teste agendada para: $testDate');
  }

  /// ADICIONADO: M√©todo para debugar notifica√ß√µes pendentes
  Future<void> debugPendingNotifications() async {
    final pending = await getPendingNotifications();
    debugPrint('üìã Notifica√ß√µes pendentes: ${pending.length}');

    for (final notification in pending) {
      debugPrint('  - ID: ${notification.id}, T√≠tulo: ${notification.title}');
    }
  }
}
