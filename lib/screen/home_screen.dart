import 'dart:async';

import 'package:economize/animations/fade_animation.dart';
import 'package:economize/animations/glass_container.dart';
import 'package:economize/animations/interactive_animations.dart';
import 'package:economize/animations/scale_animation.dart';
import 'package:economize/animations/slide_animation.dart';
import 'package:economize/model/notification_type.dart';
import 'package:economize/screen/responsive_screen.dart';
import 'package:economize/service/costs_service.dart';
import 'package:economize/service/notification_service.dart';
import 'package:economize/service/revenues_service.dart';
import 'package:economize/theme/app_themes.dart';
import 'package:economize/theme/theme_manager.dart';
import 'package:economize/widgets/theme_selector.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:intl/intl.dart';
import 'package:provider/provider.dart';
import 'dart:math' as math;

import 'package:shared_preferences/shared_preferences.dart';
import 'package:url_launcher/url_launcher.dart';

// Importar o servi√ßo de notifica√ß√µes e o modelo de notifica√ß√£o (Adicionado)

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  static final GlobalKey<_HomeScreenState> _homeKey =
      GlobalKey<_HomeScreenState>();

  static void refreshHomeData() {
    try {
      final homeState = _homeKey.currentState; // ‚úÖ CORRIGIDO
      if (homeState != null && homeState.mounted) {
        homeState._loadFinancialData();
        debugPrint('‚úÖ HomeScreen atualizada via m√©todo est√°tico');
      } else {
        debugPrint('‚ö†Ô∏è HomeScreen n√£o est√° dispon√≠vel para atualiza√ß√£o');
      }
    } catch (e) {
      debugPrint('‚ùå Erro ao atualizar HomeScreen: $e');
    }
  }

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen>
    with SingleTickerProviderStateMixin {
  final ScrollController _gridController = ScrollController();
  static const String _lastTipShownKey = 'last_tip_shown_date';

  // Adicionar estes novos elementos
  StreamSubscription<String>? _updateSubscription;
  Timer? _periodicTimer;

  // Returns the route for each functionality index
  String _getRouteForIndex(int index) {
    switch (index) {
      case 0:
        return '/accounts';
      case 1:
        return '/costs';
      case 2:
        return '/revenues';
      case 3:
        return '/dashboard';
      case 4:
        return '/report';
      case 5:
        return '/items/manage';
      case 6:
        return '/tips';
      case 7:
        return '/trend';
      case 8:
        return '/goals';
      case 9:
        return '/budget/list';
      default:
        return '';
    }
  }

  // Returns the label for each functionality index
  String _getLabelForIndex(int index) {
    switch (index) {
      case 0:
        return 'Contas';
      case 1:
        return 'Despesas';
      case 2:
        return 'Receitas';
      case 3:
        return 'Dashboard';
      case 4:
        return 'Relat√≥rios';
      case 5:
        return 'Gerenciar Produtos';
      case 6:
        return 'Dicas';
      case 7:
        return 'Tend√™ncias';
      case 8:
        return 'Metas';
      case 9:
        return 'Or√ßamentos';
      default:
        return '';
    }
  }

  bool _isAnimating = false;
  int? selectedIndex;
  final PageController _pageController = PageController();
  final ValueNotifier<double> _scrollProgress = ValueNotifier<double>(0);
  final ValueNotifier<bool> _showFloatingPanel = ValueNotifier<bool>(false);

  // Controlador para anima√ß√µes gerais
  late AnimationController _controller;
  late Animation<double> _logoAnimation;

  // Servi√ßos para dados financeiros reais
  final CostsService _costsService = CostsService();
  final RevenuesService _revenuesService = RevenuesService();
  // Adicione o servi√ßo de notifica√ß√µes (Adicionado)
  final NotificationService _notificationService = NotificationService();

  final currencyFormat = NumberFormat.currency(locale: 'pt_BR', symbol: 'R\$');

  // Estados para intera√ß√µes
  int selectedCategoryTab = 0;
  bool expandedViewMode = false;

  // Para dados do usu√°rio
  String _greeting = "Ol√°";
  double _currentBalance = 0.0;
  double _savingsGoalProgress = 0.0;
  double _expensesBudgetProgress = 0.0;

  // Adicione estas vari√°veis na classe _HomeScreenState
  double _previousBalance = 0.0;

  bool isLoadingFinancialData = false;

  // Categorias de funcionalidades
  final List<String> _categories = [
    "Principais",
    "Financeiro",
    "Gest√£o",
    "Relat√≥rios"
  ];

  @override
  void initState() {
    super.initState();

    // Garantir orienta√ß√£o portrait ao iniciar/inicializar
    SystemChrome.setPreferredOrientations([
      DeviceOrientation.portraitUp,
    ]);

    // Configurar a UI do sistema para melhor compatibilidade
    SystemChrome.setSystemUIOverlayStyle(
      const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.light,
        statusBarBrightness: Brightness.dark,
        systemNavigationBarColor: Colors.transparent,
        systemNavigationBarIconBrightness: Brightness.dark,
      ),
    );

    // Inicializar o servi√ßo de notifica√ß√µes
    _notificationService.initialize();

    _controller = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 8000),
    );

    _logoAnimation = CurvedAnimation(
      parent: _controller,
      curve: Curves.elasticOut,
    );

    _controller.forward();

    _checkIfTipShouldBeShown();
    _updateGreeting();

    loadPreviousBalance();
    _loadFinancialData();

    _setupUpdateListeners();

    // NOVO: Timer peri√≥dico para atualiza√ß√µes autom√°ticas (opcional)
    _setupPeriodicUpdates();
  }

  Future<void> _checkIfTipShouldBeShown() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final String? lastShownDate = prefs.getString(_lastTipShownKey);

      // Obt√©m a data atual no formato YYYY-MM-DD
      final today = DateTime.now().toString().split(' ')[0];

      if (lastShownDate != today) {
        // Se a data for diferente ou n√£o existir, mostrar a dica
        if (mounted) {
          Future.delayed(const Duration(milliseconds: 800), () {
            if (mounted) {
              _showFloatingPanel.value = true;
              // Salvar a data atual
              prefs.setString(_lastTipShownKey, today);
            }
          });
        }
      } else {
        // J√° mostrou hoje, n√£o mostrar novamente
        _showFloatingPanel.value = false;
      }
    } catch (e) {
      debugPrint('Erro ao verificar data da √∫ltima dica: $e');
      // Em caso de erro, n√£o mostrar a dica
      _showFloatingPanel.value = false;
    }
  }

  void _setupUpdateListeners() {
    // Listener para mudan√ßas via SharedPreferences
    _updateSubscription = _watchForUpdates().listen((_) {
      if (mounted) {
        _loadFinancialData();
      }
    });
  }

  // NOVO: Stream que monitora mudan√ßas
  Stream<String> _watchForUpdates() async* {
    String lastUpdate = '';
    while (true) {
      await Future.delayed(const Duration(seconds: 1));
      try {
        final prefs = await SharedPreferences.getInstance();
        final currentUpdate = prefs.getString('last_finance_update') ?? '';
        if (currentUpdate != lastUpdate && currentUpdate.isNotEmpty) {
          lastUpdate = currentUpdate;
          yield currentUpdate;
        }
      } catch (e) {
        debugPrint('Erro ao verificar atualiza√ß√µes: $e');
      }
    }
  }

  // NOVO: Timer peri√≥dico (backup)
  void _setupPeriodicUpdates() {
    _periodicTimer = Timer.periodic(
      const Duration(minutes: 2), // Atualiza a cada 5minutos
      (timer) {
        if (mounted && !isLoadingFinancialData) {
          // ‚úÖ ADICIONAR !isLoadingFinancialData
          debugPrint('‚è∞ Atualiza√ß√£o peri√≥dica autom√°tica');
          _loadFinancialData();
        }
      },
    );
  }

  void scrollToTop() {
    if (_gridController.hasClients) {
      _gridController.animateTo(
        0,
        duration: const Duration(milliseconds: 300),
        curve: Curves.easeOut,
      );
    }
  }

  void _updateGreeting() {
    final hour = DateTime.now().hour;
    if (hour < 12) {
      _greeting = "Bom dia";
    } else if (hour < 18) {
      _greeting = "Boa tarde";
    } else {
      _greeting = "Boa noite";
    }
  }

  // MODIFICAR: M√©todo _loadFinancialData para incluir mais logs
  Future<void> _loadFinancialData() async {
    // Evitar m√∫ltiplas execu√ß√µes simult√¢neas
    if (isLoadingFinancialData) {
      debugPrint('‚ö†Ô∏è Carregamento j√° em andamento, ignorando nova solicita√ß√£o');
      return;
    }

    if (mounted) {
      setState(() {
        isLoadingFinancialData = true;
      });
    }

    try {
      debugPrint('üîÑ Atualizando dados financeiros...');

      // Obter receitas e despesas
      final costs = await _costsService.getAllCosts();
      final revenues = await _revenuesService.getAllRevenues();

      debugPrint('üí∞ Receitas encontradas: ${revenues.length}');
      debugPrint('üí∏ Despesas encontradas: ${costs.length}');

      // Calcular saldo total
      final totalCosts = costs.fold<double>(0, (sum, cost) => sum + cost.preco);
      final totalRevenues =
          revenues.fold<double>(0, (sum, revenue) => sum + revenue.preco);

      debugPrint('üí∞ Total receitas: R\$ ${totalRevenues.toStringAsFixed(2)}');
      debugPrint('üí∏ Total despesas: R\$ ${totalCosts.toStringAsFixed(2)}');

      // Armazenar o saldo anterior
      _previousBalance = _currentBalance;
      final newBalance = totalRevenues - totalCosts;

      // Calcular varia√ß√£o percentual
      if (_previousBalance != 0) {
      } else if (newBalance > 0) {}

      // Calcular progresso de metas
      final savingsGoal = totalRevenues * 0.3;
      final currentSavings = newBalance > 0 ? newBalance : 0; // ‚úÖ CORRIGIDO
      final expensesBudget = totalRevenues * 0.7;

      if (mounted) {
        setState(() {
          _currentBalance = newBalance;

          _savingsGoalProgress = savingsGoal > 0
              ? (currentSavings / savingsGoal).clamp(0.0, 1.0)
              : 0.0;

          _expensesBudgetProgress = expensesBudget > 0
              ? (totalCosts / expensesBudget).clamp(0.0, 1.0)
              : 0.0;
        });

        debugPrint(
            '‚úÖ Dados atualizados - Saldo: R\$ ${newBalance.toStringAsFixed(2)}');
        debugPrint(
            'üìä Progresso economia: ${(_savingsGoalProgress * 100).toStringAsFixed(1)}%');
        debugPrint(
            'üìä Progresso despesas: ${(_expensesBudgetProgress * 100).toStringAsFixed(1)}%');
      }
    } catch (e) {
      debugPrint('‚ùå Erro ao carregar dados financeiros: $e');
      if (mounted) {
        setState(() {
          _currentBalance = 0.0;
          _savingsGoalProgress = 0.0;
          _expensesBudgetProgress = 0.0;
        });
      }
    } finally {
      if (mounted) {
        setState(() {
          isLoadingFinancialData = false; // ‚úÖ SEMPRE limpar loading
        });
      }
    }
  }

  // M√©todo para carregar o saldo anterior (m√™s passado ou per√≠odo anterior)
  Future<void> loadPreviousBalance() async {
    try {
      // Obter o m√™s anterior
      final now = DateTime.now();
      final lastMonth = DateTime(now.year, now.month - 1, 1);
      final endOfLastMonth = DateTime(now.year, now.month, 0);

      // Buscar despesas do m√™s anterior
      final lastMonthCosts =
          await _costsService.getCostsByDateRange(lastMonth, endOfLastMonth);

      // Buscar receitas do m√™s anterior
      final lastMonthRevenues = await _revenuesService.getRevenuesByDateRange(
          lastMonth, endOfLastMonth);

      // Calcular saldo anterior
      final lastMonthTotalCosts =
          lastMonthCosts.fold<double>(0, (sum, cost) => sum + cost.preco);
      final lastMonthTotalRevenues = lastMonthRevenues.fold<double>(
          0, (sum, revenue) => sum + revenue.preco);

      setState(() {
        _previousBalance = lastMonthTotalRevenues - lastMonthTotalCosts;
// <-- s√≥ aqui!
      });
    } catch (e) {
      debugPrint('Erro ao carregar saldo anterior: $e');
      _previousBalance = _currentBalance * 0.95;
// <-- aqui!
    }
  }

  @override
  void dispose() {
    _updateSubscription?.cancel();
    _periodicTimer?.cancel();
    _pageController.dispose();
    _scrollProgress.dispose();
    _showFloatingPanel.dispose();
    _controller.dispose();
    _gridController.dispose();
    super.dispose();
  }

  // NOVO: M√©todo para for√ßar atualiza√ß√£o (chamado pelos bot√µes)
  void _forceRefresh() {
    debugPrint('üîÑ Atualiza√ß√£o for√ßada solicitada');
    _loadFinancialData();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final themeManager = context.watch<ThemeManager>();
    final mediaQuery = MediaQuery.of(context);
    final screenSize = mediaQuery.size;
    final padding = mediaQuery.padding; // ‚úÖ ADICIONAR ESTA LINHA

    // Determinar se estamos no tema escuro para ajustar detalhes visuais
    final isDarkMode = themeManager.currentThemeType != ThemeType.light;

    return ResponsiveScreen(
      key: HomeScreen._homeKey,
      backgroundColor: themeManager.getDashboardHeaderBackgroundColor(),
      appBar: _buildAppBar(theme, isDarkMode, themeManager),
      bottomNavigationBar: buildBottomNavBar(theme, padding),
      floatingActionButtonLocation: FloatingActionButtonLocation.centerDocked,
      child: Stack(
        fit: StackFit.expand,
        children: [
          // Fundo decorativo suave (sem anima√ß√µes piscantes)
          Positioned.fill(
            child: _buildSafeFundoGradiente(themeManager),
          ),

          // Conte√∫do principal
          // Conte√∫do principal com SafeArea apropriado
          Positioned.fill(
            child: SafeArea(
              top: true,
              bottom: false,
              left: true,
              right: true,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  // Painel de boas-vindas e resumo financeiro
                  _buildWelcomePanel(themeManager, screenSize),

                  // Abas de categorias
                  _buildCategoryTabs(theme, themeManager),

                  // Grid de fun√ß√µes
                  Expanded(
                    child: expandedViewMode
                        ? _buildExpandedView(screenSize, themeManager)
                        : _buildGridView(screenSize, themeManager),
                  ),
                ],
              ),
            ),
          ),

          // Painel flutuante de dica
          _buildFloatingTipPanel(theme, themeManager),

          // Overlay para anima√ß√£o de transi√ß√£o
          _isAnimating
              ? AnimatedOpacity(
                  duration: const Duration(milliseconds: 300),
                  opacity: _isAnimating ? 1.0 : 0.0,
                  child: Container(
                    color: Colors.black54,
                  ),
                )
              : const SizedBox.shrink(),
        ],
      ),
    );
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    DateTime? lastUpdateTime;
    // Verificar se voltou de outra tela
    // S√≥ atualizar se n√£o estiver j√° carregando e for necess√°rio
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (!isLoadingFinancialData && mounted) {
        // Verificar se realmente precisa atualizar
        final now = DateTime.now();
        if (lastUpdateTime == null ||
            now.difference(lastUpdateTime!).inSeconds > 5) {
          lastUpdateTime = now;
          _loadFinancialData();
        }
      }
    });
  }

  DateTime? lastUpdateTime;
  // Appbar personalizado com anima√ß√µes e CONTADOR DE NOTIFICA√á√ïES (Substitu√≠do)
  AppBar _buildAppBar(
      ThemeData theme, bool isDarkMode, ThemeManager themeManager) {
    return AppBar(
      automaticallyImplyLeading: false,
      centerTitle: false,
      title: Row(
        children: [
          AnimatedBuilder(
            animation: _logoAnimation,
            builder: (context, child) {
              return Transform.scale(
                scale: 0.6 + (_logoAnimation.value * 0.4),
                child: child,
              );
            },
            child: Container(
              padding: const EdgeInsets.all(4),
              decoration: BoxDecoration(
                shape: BoxShape.circle,
                color: isDarkMode ? Colors.black26 : Colors.white,
                boxShadow: [
                  BoxShadow(
                    color: theme.colorScheme.primary
                        .withAlpha((0.3 * 255).round()),
                    blurRadius: 8,
                    spreadRadius: 1,
                  ),
                ],
              ),
              child: Hero(
                tag: 'app_logo',
                child: Image.asset('assets/icon_removedbg.png',
                    height: 40, width: 40),
              ),
            ),
          ),
          const SizedBox(width: 12),
          FadeAnimation.fadeIn(
            duration: const Duration(milliseconds: 800),
            delay: const Duration(milliseconds: 300),
            child: Text(
              'Economize\$',
              style: TextStyle(
                color: theme.colorScheme.onPrimary,
                fontSize: 24,
                fontWeight: FontWeight.bold,
                letterSpacing: 0.5,
              ),
            ),
          ),
        ],
      ),
      actions: [
        // Bot√£o de ajuda (NOVO)
        SlideAnimation.fromRight(
          delay: const Duration(milliseconds: 300),
          child: IconButton(
            icon: Icon(
              Icons.help_outline,
              color: theme.colorScheme.onPrimary,
            ),
            onPressed: () => _showHomeScreenHelp(context),
            tooltip: 'Ajuda',
          ),
        ),

        SlideAnimation.fromRight(
          delay: const Duration(milliseconds: 400),
          child: ValueListenableBuilder<int>(
              valueListenable: _notificationService.unreadCount,
              builder: (context, unreadCount, _) {
                return Stack(
                  children: [
                    IconButton(
                      icon: Icon(
                        Icons.notifications_outlined,
                        color: theme.colorScheme.onPrimary,
                      ),
                      onPressed: () {
                        _showNotificationOverlay(context);
                      },
                    ),
                    if (unreadCount > 0)
                      Positioned(
                        right: 8,
                        top: 8,
                        child: ScaleAnimation.bounceIn(
                          child: Container(
                            padding: const EdgeInsets.all(4),
                            decoration: BoxDecoration(
                              color: Colors.red,
                              shape: BoxShape.circle,
                              border: Border.all(
                                color: theme.colorScheme.primary,
                                width: 1.5,
                              ),
                            ),
                            constraints: const BoxConstraints(
                              minWidth: 18,
                              minHeight: 18,
                            ),
                            child: Text(
                              unreadCount > 9 ? '9+' : '$unreadCount',
                              style: const TextStyle(
                                color: Colors.white,
                                fontSize: 10,
                                fontWeight: FontWeight.bold,
                              ),
                              textAlign: TextAlign.center,
                            ),
                          ),
                        ),
                      ),
                  ],
                );
              }),
        ),
        SlideAnimation.fromRight(
          delay: const Duration(milliseconds: 500),
          child: IconButton(
            icon: Icon(
              Icons.search,
              color: theme.colorScheme.onPrimary,
            ),
            onPressed: () {
              showSearch(context: context, delegate: AppSearchDelegate());
            },
          ),
        ),
        const SizedBox(width: 8),
      ],
      backgroundColor: theme.colorScheme.primary,
      elevation: 0,
    );
  }

  // Barra de navega√ß√£o inferior
  // Barra de navega√ß√£o inferior
  Widget buildBottomNavBar(ThemeData theme, EdgeInsets padding) {
    return Container(
      decoration: BoxDecoration(
        color: theme.colorScheme.surface,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withAlpha((0.1 * 255).round()),
            blurRadius: 5,
            offset: const Offset(0, -1),
          ),
        ],
      ),
      child: SafeArea(
        top: false,
        child: BottomNavigationBar(
          backgroundColor: Colors.transparent,
          elevation: 0,
          selectedItemColor: theme.colorScheme.primary,
          unselectedItemColor:
              theme.colorScheme.onSurface.withAlpha((0.6 * 255).round()),
          type: BottomNavigationBarType.fixed,
          showUnselectedLabels: true,
          items: [
            BottomNavigationBarItem(
              icon: ScaleAnimation.bounceIn(
                child: Icon(Icons.palette, color: theme.colorScheme.primary),
              ),
              label: 'Temas',
            ),
            BottomNavigationBarItem(
              icon: ScaleAnimation.bounceIn(
                child: Icon(Icons.flag, color: theme.colorScheme.primary),
              ),
              label: 'Metas',
            ),
            // BOT√ÉO CENTRAL √âPICO! üéØ
            BottomNavigationBarItem(
              icon: Container(
                width: 56,
                height: 56,
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                    colors: [
                      theme.colorScheme.primary,
                      theme.colorScheme.primary.withValues(alpha: 0.8),
                    ],
                  ),
                  shape: BoxShape.circle,
                  boxShadow: [
                    BoxShadow(
                      color: theme.colorScheme.primary.withValues(alpha: 0.3),
                      blurRadius: 8,
                      offset: const Offset(0, 4),
                    ),
                  ],
                ),
                child: ScaleAnimation.bounceIn(
                  child: Icon(
                    Icons.menu,
                    color: Colors.white,
                    size: 28,
                  ),
                ),
              ),
              label: 'Menu',
            ),
            BottomNavigationBarItem(
              icon: ScaleAnimation.bounceIn(
                child: Icon(Icons.account_balance,
                    color: theme.colorScheme.primary),
              ),
              label: 'Saldo',
            ),
            BottomNavigationBarItem(
              icon: ScaleAnimation.bounceIn(
                child:
                    Icon(Icons.emoji_events, color: theme.colorScheme.primary),
              ),
              label: 'Conquistas',
            ),
          ],
          onTap: (index) {
            switch (index) {
              case 0:
                _showThemeSelector(context);
                break;
              case 1:
                Navigator.pushNamed(context, '/goals');
                break;
              case 2:
                // üé≠ MENU √âPICO!
                _showCentralMenu(context);
                break;
              case 3:
                Navigator.pushNamed(context, '/balance');
                break;
              case 4:
                // üèÜ GALERIA DE CONQUISTAS!
                Navigator.pushNamed(context, '/achievements');
                break;
            }
          },
        ),
      ),
    );
  }

  void _showCentralMenu(BuildContext context) {
    final theme = Theme.of(context);
    final themeManager = context.read<ThemeManager>();

    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      isScrollControlled: true,
      builder: (context) => _CentralMenuBottomSheet(
        theme: theme,
        themeManager: themeManager,
      ),
    );
  }

  void _showThemeSelector(BuildContext context) {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      isScrollControlled: true, // ADICIONA ESTA LINHA
      builder: (context) => Padding(
        padding: EdgeInsets.only(
          bottom: MediaQuery.of(context).viewInsets.bottom +
              MediaQuery.of(context).padding.bottom, // ADICIONA ESTE PADDING
        ),
        child: const ThemeSelector(),
      ),
    );
  }

  // Fundo com gradiente suave e padr√£o discreto
  Widget _buildSafeFundoGradiente(ThemeManager themeManager) {
    final isDark = themeManager.currentThemeType != ThemeType.light;

    return Stack(
      children: [
        // Gradiente base - CORRIGIDO PARA USAR AS CORES CORRETAS
        Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: isDark
                  ? [
                      // ROXO: Gradiente roxo com branco (igual ao preto com branco)
                      themeManager
                          .getDashboardHeaderBackgroundColor(), // Roxo puro
                      themeManager
                          .getDashboardHeaderBackgroundColor()
                          .withAlpha((0.7 * 255).round()), // Roxo mais claro
                      Colors.white
                          .withAlpha((0.05 * 255).round()), // Branco bem suave
                      Colors.white.withAlpha(
                          (0.02 * 255).round()), // Branco quase invis√≠vel
                    ]
                  : [
                      // CLARO: Manter como est√° (funcionando)
                      themeManager
                          .getCurrentPrimaryColor()
                          .withAlpha((0.05 * 255).round()),
                      Colors.white,
                      themeManager
                          .getCurrentPrimaryColor()
                          .withAlpha((0.02 * 255).round()),
                    ],
            ),
          ),
        ),

        // Padr√£o de formas geom√©tricas com anima√ß√£o MAIS LENTA
        AnimatedBuilder(
          animation: _controller,
          builder: (context, child) {
            return CustomPaint(
              painter: _SafeBackgroundPatternPainter(
                primaryColor: themeManager.getCurrentPrimaryColor(),
                isDark: isDark,
                animationValue: _controller.value,
              ),
              size: Size.infinite,
            );
          },
        ),
      ],
    );
  }

  // Painel de boas-vindas com resumo financeiro (COM BOT√ÉO DE AJUDA)
  Widget _buildWelcomePanel(ThemeManager themeManager, Size screenSize) {
    return Padding(
      padding: const EdgeInsets.fromLTRB(16, 16, 16, 8),
      child: SlideAnimation.fromTop(
        distance: 0.3,
        delay: const Duration(milliseconds: 300),
        child: GestureDetector(
          onTap: () {
            Navigator.pushNamed(context, '/dashboard');
          },
          child: Container(
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(24),
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  themeManager.getCurrentPrimaryColor(),
                  themeManager.getCurrentSecondaryColor(),
                ],
              ),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withAlpha((0.2 * 255).round()),
                  offset: const Offset(0, 4),
                  blurRadius: 8,
                ),
              ],
            ),
            child: Stack(
              children: [
                // Conte√∫do original do card
                Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                '$_greeting!',
                                style: const TextStyle(
                                  color: Colors.white,
                                  fontSize: 18,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              const SizedBox(height: 4),
                              Row(
                                children: [
                                  const Text(
                                    'Seu saldo atual',
                                    style: TextStyle(
                                      color: Colors.white70,
                                      fontSize: 14,
                                    ),
                                  ),
                                  // ADICIONAR: Indicador de loading pequeno
                                  if (isLoadingFinancialData) ...[
                                    const SizedBox(width: 8),
                                    const SizedBox(
                                      width: 12,
                                      height: 12,
                                      child: CircularProgressIndicator(
                                        strokeWidth: 1.5,
                                        valueColor:
                                            AlwaysStoppedAnimation<Color>(
                                                Colors.white70),
                                      ),
                                    ),
                                  ],
                                ],
                              ),
                            ],
                          ),
                        ],
                      ),
                      const SizedBox(height: 12),
                      Text(
                        currencyFormat.format(_currentBalance),
                        style: const TextStyle(
                          color: Colors.white,
                          fontSize: 28,
                          fontWeight: FontWeight.w700,
                          letterSpacing: 1,
                        ),
                      ),
                      const SizedBox(height: 8),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.start,
                        children: [
                          Container(
                            padding: const EdgeInsets.symmetric(
                                horizontal: 12, vertical: 6),
                            decoration: BoxDecoration(
                              color:
                                  Colors.white.withAlpha((0.15 * 255).round()),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            child: Icon(
                              _currentBalance >= 0
                                  ? Icons.trending_up
                                  : Icons.trending_down,
                              color: _currentBalance >= 0
                                  ? Colors.greenAccent
                                  : Colors.redAccent,
                              size: 16,
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 16),
                      Row(
                        children: [
                          Expanded(
                            child: _buildProgressIndicator(
                              'Meta de Economia',
                              _savingsGoalProgress,
                              Colors.greenAccent,
                            ),
                          ),
                          const SizedBox(width: 12),
                          Expanded(
                            child: _buildProgressIndicator(
                              'Gastos do Or√ßamento',
                              _expensesBudgetProgress,
                              Colors.amberAccent,
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),

                // ‚úÖ NOVOS BOT√ïES NO TOPO DIREITO
                Positioned(
                  top: 10,
                  right: 10,
                  child: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      // üîÑ BOT√ÉO DE REFRESH
                      PressableCard(
                        onPress: () {
                          debugPrint('üîÑ Refresh manual do card financeiro');
                          _forceRefresh();

                          // Feedback visual
                          HapticFeedback.lightImpact();

                          // Mostrar SnackBar de confirma√ß√£o
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(
                              content: Row(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  SizedBox(
                                    width: 16,
                                    height: 16,
                                    child: CircularProgressIndicator(
                                      strokeWidth: 2,
                                      valueColor: AlwaysStoppedAnimation<Color>(
                                          Colors.white),
                                    ),
                                  ),
                                  const SizedBox(width: 12),
                                  const Text(
                                    'üîÑ Atualizando dados...',
                                    style: TextStyle(color: Colors.white),
                                  ),
                                ],
                              ),
                              backgroundColor:
                                  themeManager.getCurrentPrimaryColor(),
                              duration: const Duration(milliseconds: 1500),
                              behavior: SnackBarBehavior.floating,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(8),
                              ),
                            ),
                          );
                        },
                        pressedScale: 0.85,
                        decoration: BoxDecoration(
                          color: Colors.white.withAlpha((0.2 * 255).round()),
                          shape: BoxShape.circle,
                        ),
                        padding: const EdgeInsets.all(8),
                        child: AnimatedRotation(
                          turns: isLoadingFinancialData ? 1 : 0,
                          duration: const Duration(milliseconds: 500),
                          child: Icon(
                            Icons.refresh,
                            color: Colors.white,
                            size: 20,
                          ),
                        ),
                      ),

                      const SizedBox(width: 8), // Espa√ßo entre os bot√µes

                      // ‚ùì BOT√ÉO DE AJUDA (j√° existia)
                      PressableCard(
                        onPress: () => _showFinancialCardHelp(context),
                        pressedScale: 0.85,
                        decoration: BoxDecoration(
                          color: Colors.white.withAlpha((0.2 * 255).round()),
                          shape: BoxShape.circle,
                        ),
                        padding: const EdgeInsets.all(8),
                        child: const Icon(
                          Icons.help_outline,
                          color: Colors.white,
                          size: 20,
                        ),
                      ),
                    ],
                  ),
                ),

                // ADICIONAR: Overlay de loading para o card inteiro (opcional)
                if (isLoadingFinancialData)
                  Positioned.fill(
                    child: Container(
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(24),
                        color: Colors.black.withAlpha((0.1 * 255).round()),
                      ),
                      child: Center(
                        child: Container(
                          padding: const EdgeInsets.all(12),
                          decoration: BoxDecoration(
                            color: Colors.white.withAlpha((0.9 * 255).round()),
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              SizedBox(
                                width: 20,
                                height: 20,
                                child: CircularProgressIndicator(
                                  strokeWidth: 2,
                                  valueColor: AlwaysStoppedAnimation<Color>(
                                    themeManager.getCurrentPrimaryColor(),
                                  ),
                                ),
                              ),
                              const SizedBox(width: 12),
                              Text(
                                'Atualizando...',
                                style: TextStyle(
                                  color: themeManager.getCurrentPrimaryColor(),
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  // Indicador de progresso para o painel
  Widget _buildProgressIndicator(String label, double progress, Color color) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: const TextStyle(
            color: Colors.white70,
            fontSize: 12,
          ),
        ),
        const SizedBox(height: 6),
        Stack(
          children: [
            Container(
              height: 5,
              decoration: BoxDecoration(
                color: Colors.white.withAlpha((0.2 * 255).round()),
                borderRadius: BorderRadius.circular(10),
              ),
            ),
            FractionallySizedBox(
              widthFactor: progress,
              child: Container(
                height: 5,
                decoration: BoxDecoration(
                  color: color,
                  borderRadius: BorderRadius.circular(10),
                ),
              ),
            ),
          ],
        ),
        const SizedBox(height: 4),
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text(
              '${(progress * 100).toInt()}%',
              style: TextStyle(
                color: color,
                fontSize: 12,
                fontWeight: FontWeight.bold,
              ),
            ),
            const Text(
              '100%',
              style: TextStyle(
                color: Colors.white60,
                fontSize: 12,
              ),
            ),
          ],
        ),
      ],
    );
  }

  // Abas de categorias
  Widget _buildCategoryTabs(ThemeData theme, ThemeManager themeManager) {
    final bool isDark = themeManager.currentThemeType != ThemeType.light;

    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: SlideAnimation.fromLeft(
        delay: const Duration(milliseconds: 500),
        child: SizedBox(
          height: 40,
          child: ListView.builder(
            scrollDirection: Axis.horizontal,
            padding: const EdgeInsets.symmetric(horizontal: 16),
            itemCount: _categories.length,
            itemBuilder: (context, index) {
              final isSelected = selectedCategoryTab == index;
              return GestureDetector(
                onTap: () {
                  setState(() => selectedCategoryTab = index);
                  // Rola para o topo imediatamente quando um filtro √© selecionado
                  WidgetsBinding.instance.addPostFrameCallback((_) {
                    if (_gridController.hasClients) {
                      _gridController.animateTo(
                        0,
                        duration: const Duration(milliseconds: 300),
                        curve: Curves.easeOut,
                      );
                    }
                  });
                },
                child: Container(
                  margin: const EdgeInsets.only(right: 12),
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  decoration: BoxDecoration(
                    color: isSelected
                        ? theme.colorScheme.primary
                        : isDark
                            ? Colors.white
                            : theme.cardColor,
                    borderRadius: BorderRadius.circular(20),
                    boxShadow: isSelected
                        ? [
                            BoxShadow(
                              color: theme.colorScheme.primary.withAlpha(102),
                              blurRadius: 8,
                            )
                          ]
                        : null,
                    border: isSelected
                        ? null
                        : Border.all(color: theme.dividerColor, width: 1),
                  ),
                  alignment: Alignment.center,
                  child: Text(
                    _categories[index],
                    style: TextStyle(
                      color: isSelected
                          ? theme.colorScheme.onPrimary
                          : isDark
                              ? themeManager.getCurrentPrimaryColor()
                              : theme.colorScheme.onSurface,
                      fontWeight:
                          isSelected ? FontWeight.bold : FontWeight.normal,
                    ),
                  ),
                ),
              );
            },
          ),
        ),
      ),
    );
  }

  // Vista em grade
  Widget _buildGridView(Size screenSize, ThemeManager themeManager) {
    final isDark = themeManager.currentThemeType != ThemeType.light;

    // Filtrar os √≠ndices com base na categoria selecionada
    List<int> filteredIndices = [];

    if (selectedCategoryTab == 0) {
      // Se for "Principais", mostrar todos os itens
      filteredIndices = List.generate(10, (index) => index);
    } else if (selectedCategoryTab == 1) {
      filteredIndices = [0, 1, 2, 9]; // <-- ADICIONE O 9 AQUI
    } else if (selectedCategoryTab == 2) {
      // Gest√£o
      filteredIndices = [3, 4, 5, 8];
    } else if (selectedCategoryTab == 3) {
      // Relat√≥rios
      filteredIndices = [6, 7];
    }

    return Column(
      children: [
        // Alternador de modos de visualiza√ß√£o
        Padding(
          padding: const EdgeInsets.fromLTRB(16, 8, 16, 16),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              FadeAnimation.fadeIn(
                delay: const Duration(milliseconds: 600),
                child: Text(
                  'Funcionalidades',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                    color: isDark
                        ? Colors.white
                        : Theme.of(context).colorScheme.onSurface,
                  ),
                ),
              ),
              FadeAnimation.fadeIn(
                delay: const Duration(milliseconds: 700),
                child: PressableCard(
                  onPress: () {
                    setState(() {
                      expandedViewMode = !expandedViewMode;
                    });
                  },
                  decoration: BoxDecoration(
                    color: isDark ? Colors.white : Theme.of(context).cardColor,
                    borderRadius: BorderRadius.circular(8),
                  ),
                  padding: const EdgeInsets.all(8),
                  child: Icon(
                    expandedViewMode ? Icons.grid_view : Icons.view_list,
                    size: 20,
                    color: themeManager.getCurrentPrimaryColor(),
                  ),
                ),
              ),
            ],
          ),
        ),

        // Grade de funcionalidades com NotificationListener para detectar rolagem
        Expanded(
          child: NotificationListener<ScrollNotification>(
            onNotification: (scrollNotification) {
              // Atualiza o progresso da rolagem para poss√≠veis usos futuros
              if (_gridController.hasClients) {
                _scrollProgress.value = _gridController.offset /
                    (_gridController.position.maxScrollExtent + 0.0001);
              }
              return false;
            },
            child: GridView.builder(
              key: ValueKey<int>(
                  selectedCategoryTab), // Mant√©m a chave para reconstru√ß√£o
              controller: _gridController,
              padding: const EdgeInsets.fromLTRB(16, 8, 16, 16),
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                childAspectRatio: 1.2,
                mainAxisSpacing: 16,
                crossAxisSpacing: 16,
              ),
              itemCount:
                  filteredIndices.length, // Usa o comprimento da lista filtrada
              itemBuilder: (context, index) {
                // Pega o √≠ndice real do item a partir da lista filtrada
                final realIndex = filteredIndices[index];

                return FadeAnimation.fadeIn(
                  delay: Duration(milliseconds: 700 + (index * 100)),
                  child: _buildGridItemWithAnimation(
                    index: realIndex,
                    icon: _getIconForIndex(realIndex),
                    label: _getLabelForIndex(realIndex),
                    route: _getRouteForIndex(realIndex),
                    themeManager: themeManager,
                  ),
                );
              },
            ),
          ),
        ),
      ],
    );
  }

  // Vista expandida em lista
  Widget _buildExpandedView(Size screenSize, ThemeManager themeManager) {
    final isDark = themeManager.currentThemeType != ThemeType.light;

    return Column(
      children: [
        // T√≠tulo e alternador
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                'Funcionalidades',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: isDark
                      ? Colors.white
                      : Theme.of(context).colorScheme.onSurface,
                ),
              ),
              PressableCard(
                onPress: () {
                  setState(() {
                    expandedViewMode = !expandedViewMode;
                  });
                },
                decoration: BoxDecoration(
                  color: isDark ? Colors.white : Theme.of(context).cardColor,
                  borderRadius: BorderRadius.circular(8),
                ),
                padding: const EdgeInsets.all(8),
                child: Icon(
                  expandedViewMode ? Icons.grid_view : Icons.view_list,
                  size: 20,
                  color: themeManager.getCurrentPrimaryColor(),
                ),
              ),
            ],
          ),
        ),

        // Lista de funcionalidades
        Expanded(
          child: ListView.builder(
            padding: const EdgeInsets.fromLTRB(16, 8, 16, 16),
            itemCount: 10,
            itemBuilder: (context, index) {
              // Filtrar por categoria selecionada
              if (selectedCategoryTab != 0) {
                if (selectedCategoryTab == 1 && ![0, 1, 2, 9].contains(index)) {
                  return const SizedBox.shrink();
                } else if (selectedCategoryTab == 2 &&
                    ![3, 4, 5, 8].contains(index)) {
                  return const SizedBox.shrink();
                } else if (selectedCategoryTab == 3 &&
                    ![6, 7].contains(index)) {
                  return const SizedBox.shrink();
                }
              }

              return SlideAnimation.fromRight(
                delay: Duration(milliseconds: 300 + (index * 50)),
                child: Padding(
                  padding: const EdgeInsets.only(bottom: 12),
                  child: _buildListItem(
                    index: index,
                    icon: _getIconForIndex(index),
                    label: _getLabelForIndex(index),
                    route: _getRouteForIndex(index),
                    themeManager: themeManager,
                  ),
                ),
              );
            },
          ),
        ),
      ],
    );
  }

  // Item de lista para vista expandida
  Widget _buildListItem({
    required int index,
    required IconData icon,
    required String label,
    required String route,
    required ThemeManager themeManager,
  }) {
    final theme = Theme.of(context);
    final isDark = themeManager.currentThemeType != ThemeType.light;

    return PressableCard(
      onPress: () => _handleItemTap(index, route),
      decoration: BoxDecoration(
        color: isDark ? Colors.white : theme.cardColor,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withAlpha((0.5 * 255).round()),
            blurRadius: 10,
            offset: const Offset(0, 2),
          ),
        ],
        border: Border.all(
          color: themeManager
              .getCurrentPrimaryColor()
              .withAlpha((0.2 * 255).round()),
          width: 1,
        ),
      ),
      padding: const EdgeInsets.all(16),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: themeManager
                  .getCurrentPrimaryColor()
                  .withAlpha((0.2 * 255).round()),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Icon(
              icon,
              color: themeManager.getCurrentPrimaryColor(),
              size: 24,
            ),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  label,
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                    color: themeManager.getCurrentPrimaryColor(),
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  _getDescriptionForIndex(index),
                  style: TextStyle(
                    fontSize: 12,
                    color: isDark
                        ? themeManager
                            .getCurrentPrimaryColor()
                            .withAlpha((0.7 * 255).round())
                        : theme.colorScheme.onSurface
                            .withAlpha((0.7 * 255).round()),
                  ),
                ),
              ],
            ),
          ),
          Icon(
            Icons.chevron_right,
            color: themeManager.getCurrentPrimaryColor(),
          ),
        ],
      ),
    );
  }

  // Adicionado: m√©todo para fornecer descri√ß√µes para cada funcionalidade
  String _getDescriptionForIndex(int index) {
    switch (index) {
      case 0:
        return 'Gerencie suas contas banc√°rias e cart√µes de cr√©dito.';
      case 1:
        return 'Registre e acompanhe todas as suas despesas.';
      case 2:
        return 'Adicione e visualize suas receitas facilmente.';
      case 3:
        return 'Veja um resumo completo do seu desempenho financeiro.';
      case 4:
        return 'Acesse relat√≥rios detalhados de suas finan√ßas.';
      case 5:
        return 'Gerencie seus produtos e itens cadastrados.';
      case 6:
        return 'Receba dicas importantes para economizar mais.';
      case 7:
        return 'Descubra tend√™ncias e insights sobre seus gastos.';
      case 8:
        return 'Cadastre suas metas e objetivos financeiros.';
      case 9:
        return 'Gerencie seus or√ßamentos mensais de forma eficiente.';
      default:
        return '';
    }
  }

  // Painel flutuante com dica
  Widget _buildFloatingTipPanel(ThemeData theme, ThemeManager themeManager) {
    final isDark = themeManager.currentThemeType != ThemeType.light;

    return ValueListenableBuilder<bool>(
      valueListenable: _showFloatingPanel,
      builder: (context, show, child) {
        return AnimatedPositioned(
          duration: const Duration(milliseconds: 500),
          curve: Curves.easeInOut,
          bottom: show ? 85 : -100,
          right: 16,
          left: 16,
          child: GlassContainer(
            frostedEffect: true,
            borderRadius: 16,
            opacity: isDark ? 0.15 : 0.1, // Ajustado para melhor visibilidade
            borderColor:
                isDark ? Colors.white.withAlpha((0.2 * 255).round()) : null,
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Row(
                children: [
                  Container(
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: themeManager
                          .getCurrentPrimaryColor()
                          .withAlpha((0.2 * 255).round()),
                      shape: BoxShape.circle,
                    ),
                    child: PulseAnimation(
                      minScale: 0.9,
                      maxScale: 1.1,
                      child: Icon(
                        Icons.lightbulb_outline,
                        color: themeManager.getCurrentPrimaryColor(),
                        size: 20,
                      ),
                    ),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Text(
                      'Se precisar de ajuda, toque no simbolo de interroga√ß√£o(?) no canto superior direito de cada tela.',
                      style: TextStyle(
                        fontSize: 14,
                        // Usar a cor prim√°ria para texto no modo escuro
                        color: isDark
                            ? themeManager.getCurrentPrimaryColor()
                            : theme.colorScheme.onSurface,
                        fontWeight: FontWeight
                            .w500, // Aumentado para melhor legibilidade
                      ),
                    ),
                  ),
                  IconButton(
                    icon: Icon(
                      Icons.close,
                      // Usar a cor prim√°ria para o √≠cone de fechar no modo escuro
                      color: isDark
                          ? themeManager.getCurrentPrimaryColor()
                          : theme.colorScheme.onSurface
                              .withAlpha((0.7 * 255).round()),
                      size: 18,
                    ),
                    onPressed: () {
                      _showFloatingPanel.value = false;
                    },
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  // Widget de item de grade animado
  Widget _buildGridItemWithAnimation({
    required int index,
    required IconData icon,
    required String label,
    required String route,
    required ThemeManager themeManager,
  }) {
    return _buildGridItem(
      icon: icon,
      label: label,
      onTap: () => _handleItemTap(index, route),
      themeManager: themeManager,
    );
  }

  // M√©todo para tratar o toque nos itens de grid/lista
  void _handleItemTap(int index, String route) {
    setState(() {
      selectedIndex = index;
      _isAnimating = true;
    });
    Future.delayed(const Duration(milliseconds: 200), () {
      setState(() {
        _isAnimating = false;
      });
      if (route.isNotEmpty) {
        Navigator.pushNamed(context, route);
      }
    });
  }

  // Widget de item de grade
  Widget _buildGridItem({
    required IconData icon,
    required String label,
    required VoidCallback onTap,
    required ThemeManager themeManager,
  }) {
    final theme = Theme.of(context);
    final isDark = themeManager.currentThemeType != ThemeType.light;

    return PressableCard(
      onPress: onTap,
      pressedScale: 0.95,
      decoration: BoxDecoration(
        color: isDark ? Colors.white : theme.cardColor,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withAlpha((0.5 * 255).round()),
            blurRadius: 10,
            offset: const Offset(0, 2),
          ),
        ],
        border: Border.all(
          color: themeManager
              .getCurrentPrimaryColor()
              .withAlpha((0.2 * 255).round()),
          width: 1,
        ),
      ),
      padding: const EdgeInsets.all(16),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: themeManager
                  .getCurrentPrimaryColor()
                  .withAlpha((0.3 * 255).round()),
              borderRadius: BorderRadius.circular(16),
            ),
            child: Icon(
              icon,
              size: 32,
              color: themeManager.getCurrentPrimaryColor(),
            ),
          ),
          const SizedBox(height: 12),
          Text(
            label,
            style: TextStyle(
              fontSize: 14,
              fontWeight: FontWeight.bold,
              color: themeManager.getCurrentPrimaryColor(),
            ),
            textAlign: TextAlign.center,
            maxLines: 2,
            overflow: TextOverflow.ellipsis,
          ),
        ],
      ),
    );
  }

  // Overlay de notifica√ß√µes (Substitu√≠do)
  // Sinaliza que este m√©todo substitui o da classe pai (State)
  void _showNotificationOverlay(BuildContext context) {
    final theme = Theme.of(context);
    final themeManager = Provider.of<ThemeManager>(context, listen: false);
    final isDark = themeManager.currentThemeType != ThemeType.light;

    // Marcar todas as notifica√ß√µes como lidas quando abrir o painel
    _notificationService.markAllAsRead();

    showDialog(
      context: context,
      builder: (context) {
        return Dialog(
          backgroundColor: Colors.transparent,
          insetPadding: EdgeInsets.zero,
          child: Container(
            width: double.infinity,
            height: double.infinity,
            color: Colors.black.withAlpha((0.3 * 255).round()),
            child: Stack(
              children: [
                // GestureDetector para fechar o dialog ao tocar fora do painel
                GestureDetector(
                  onTap: () => Navigator.pop(context),
                  behavior: HitTestBehavior.opaque,
                  child:
                      Container(), // Container vazio para preencher a √°rea toc√°vel
                ),
                Positioned(
                  top: 0,
                  right: 0,
                  // Largura do painel de notifica√ß√µes (85% da tela)
                  width: MediaQuery.of(context).size.width * 0.85,
                  height: MediaQuery.of(context).size.height,
                  child: SlideAnimation.fromRight(
                    child: Container(
                      decoration: BoxDecoration(
                        color:
                            isDark ? const Color(0xFF1A1A1A) : theme.cardColor,
                        boxShadow: [
                          BoxShadow(
                            color: Colors.black.withAlpha((0.2 * 255).round()),
                            blurRadius: 15,
                            offset: const Offset(-5, 0), // Sombra √† esquerda
                          ),
                        ],
                      ),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          // Cabe√ßalho do painel de notifica√ß√µes
                          Padding(
                            padding: const EdgeInsets.all(16),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Text(
                                  'Notifica√ß√µes',
                                  style: TextStyle(
                                    fontSize: 18,
                                    fontWeight: FontWeight.bold,
                                    color: isDark
                                        ? Colors.white
                                        : theme.colorScheme.onSurface,
                                  ),
                                ),
                                Row(
                                  children: [
                                    // Bot√£o limpar todas (aparece apenas se houver notifica√ß√µes)
                                    ValueListenableBuilder<
                                        List<NotificationItem>>(
                                      valueListenable:
                                          _notificationService.notifications,
                                      builder: (context, notifications, _) {
                                        if (notifications.isNotEmpty) {
                                          return IconButton(
                                            icon: Icon(
                                              Icons
                                                  .delete_sweep_outlined, // √çcone de lixeira
                                              color: isDark
                                                  ? Colors.white70
                                                  : Colors.grey,
                                              size:
                                                  24, // Tamanho um pouco maior
                                            ),
                                            tooltip: 'Limpar todas',
                                            onPressed: () {
                                              // Mostra um di√°logo de confirma√ß√£o antes de limpar
                                              showDialog(
                                                context: context,
                                                builder: (context) =>
                                                    AlertDialog(
                                                  backgroundColor: isDark
                                                      ? const Color(0xFF1A1A1A)
                                                      : theme
                                                          .cardColor, // Cor de fundo do AlertDialog
                                                  title: Text(
                                                      'Limpar notifica√ß√µes',
                                                      style: TextStyle(
                                                          color: isDark
                                                              ? Colors.white
                                                              : theme
                                                                  .colorScheme
                                                                  .onSurface)),
                                                  content: Text(
                                                      'Deseja realmente apagar todas as notifica√ß√µes?',
                                                      style: TextStyle(
                                                          color: isDark
                                                              ? Colors.white70
                                                              : theme
                                                                  .colorScheme
                                                                  .onSurface
                                                                  .withAlpha((0.8 *
                                                                          255)
                                                                      .round()))),
                                                  actions: [
                                                    TextButton(
                                                      onPressed: () =>
                                                          Navigator.pop(
                                                              context), // Fecha o AlertDialog
                                                      child: Text('Cancelar',
                                                          style: TextStyle(
                                                              color: theme
                                                                  .colorScheme
                                                                  .primary)),
                                                    ),
                                                    TextButton(
                                                      onPressed: () {
                                                        _notificationService
                                                            .clearAllNotifications(); // Chama o servi√ßo para limpar
                                                        Navigator.pop(
                                                            context); // Fecha o AlertDialog
                                                      },
                                                      child: Text('Confirmar',
                                                          style: TextStyle(
                                                              color:
                                                                  Colors.red)),
                                                    ),
                                                  ],
                                                  shape: RoundedRectangleBorder(
                                                      // Borda arredondada
                                                      borderRadius:
                                                          BorderRadius.circular(
                                                              16)),
                                                ),
                                              );
                                            },
                                          );
                                        }
                                        return const SizedBox
                                            .shrink(); // N√£o mostra o bot√£o se a lista estiver vazia
                                      },
                                    ),
                                    // Bot√£o fechar o painel de notifica√ß√µes
                                    IconButton(
                                      icon: Icon(
                                        Icons.close,
                                        color: isDark
                                            ? Colors.white
                                            : theme.colorScheme.onSurface,
                                      ),
                                      onPressed: () => Navigator.pop(context),
                                    ),
                                  ],
                                ),
                              ],
                            ),
                          ),
                          // Lista de notifica√ß√µes (atualizada para usar o ValueListenableBuilder)
                          Expanded(
                            child:
                                ValueListenableBuilder<List<NotificationItem>>(
                              valueListenable:
                                  _notificationService.notifications,
                              builder: (context, notifications, _) {
                                // Mensagem se a lista de notifica√ß√µes estiver vazia
                                if (notifications.isEmpty) {
                                  return Center(
                                    child: Column(
                                      mainAxisAlignment:
                                          MainAxisAlignment.center,
                                      children: [
                                        Icon(Icons.notifications_off_outlined,
                                            size: 64,
                                            color: isDark
                                                ? Colors.white.withAlpha(
                                                    (0.3 * 255).round())
                                                : Colors.grey.withAlpha(
                                                    (0.5 * 255).round())),
                                        const SizedBox(height: 16),
                                        Text(
                                          'Nenhuma notifica√ß√£o',
                                          style: TextStyle(
                                            fontSize: 16,
                                            color: isDark
                                                ? Colors.white.withAlpha(
                                                    (0.7 * 255).round())
                                                : Colors.grey.shade700,
                                          ),
                                        ),
                                        const SizedBox(height: 8),
                                        Text(
                                          'As notifica√ß√µes sobre sua atividade financeira\naparecer√£o aqui.',
                                          textAlign: TextAlign.center,
                                          style: TextStyle(
                                            fontSize: 14,
                                            color: isDark
                                                ? Colors.white.withAlpha(
                                                    (0.5 * 255).round())
                                                : Colors.grey.shade600,
                                          ),
                                        ),
                                        const SizedBox(height: 24),
                                        // Bot√£o para simular verifica√ß√£o (para fins de demonstra√ß√£o/teste)
                                        // Em uma aplica√ß√£o real, a verifica√ß√£o seria feita em segundo plano
                                        // Este bot√£o pode ser removido em produ√ß√£o.
                                        TextButton.icon(
                                          onPressed: () {
                                            // _notificationService.checkForNewNotifications(); // Supondo que este m√©todo existe para simular novas nots
                                            ScaffoldMessenger.of(context)
                                                .showSnackBar(
                                              const SnackBar(
                                                content: Text(
                                                    'Verificando atividades recentes...'),
                                                duration: Duration(seconds: 2),
                                              ),
                                            );
                                          },
                                          icon: const Icon(Icons.refresh),
                                          label: const Text(
                                              'Verificar atividades'),
                                        ),
                                      ],
                                    ),
                                  );
                                }

                                // Constr√≥i a lista de notifica√ß√µes
                                return ListView.builder(
                                  padding:
                                      const EdgeInsets.only(top: 8, bottom: 24),
                                  itemCount: notifications.length,
                                  itemBuilder: (context, index) {
                                    final notification = notifications[index];
                                    // Usa o novo m√©todo para construir cada item de notifica√ß√£o
                                    return _buildRealNotificationItem(
                                      notification: notification,
                                      themeManager: themeManager,
                                    );
                                  },
                                );
                              },
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  // M√©todo para construir um item de notifica√ß√£o real (Novo M√©todo)
  Widget _buildRealNotificationItem({
    required NotificationItem notification,
    required ThemeManager themeManager,
  }) {
    final theme = Theme.of(context);
    final isDark = themeManager.currentThemeType != ThemeType.light;

    return Dismissible(
      key: Key(notification.id), // Chave √∫nica para o Dismissible
      direction: DismissDirection
          .endToStart, // Permite deslizar para a esquerda para remover
      background: Container(
        alignment: Alignment.centerRight,
        padding: const EdgeInsets.only(right: 20),
        color: Colors.red, // Cor de fundo vermelha ao deslizar
        child:
            const Icon(Icons.delete, color: Colors.white), // √çcone de lixeira
      ),
      onDismissed: (_) {
        _notificationService.removeNotification(
            notification.id); // Remove a notifica√ß√£o ao dispensar
        // Opcional: mostrar um SnackBar de "Desfeito" para desfazer a remo√ß√£o
      },
      child: Container(
        margin:
            const EdgeInsets.fromLTRB(16, 0, 16, 12), // Margem entre os itens
        decoration: BoxDecoration(
          // Cor de fundo baseada no status de leitura e no modo escuro/claro
          color: notification.isRead
              ? isDark
                  ? const Color(
                      0xFF242424) // Cor mais escura para lidas no modo escuro
                  : theme.cardColor // Cor padr√£o para lidas no modo claro
              : isDark
                  ? notification.color.withAlpha((0.2 * 255)
                      .round()) // Cor com opacidade para n√£o lidas no escuro
                  : notification.color.withAlpha((0.1 * 255)
                      .round()), // Cor com opacidade para n√£o lidas no claro
          borderRadius: BorderRadius.circular(16), // Borda arredondada
          border: Border.all(
            // Borda sutil ou destacada
            color: notification.isRead
                ? isDark
                    ? Colors.white.withAlpha(
                        (0.1 * 255).round()) // Borda sutil para lidas no escuro
                    : theme.dividerColor.withAlpha(
                        (0.5 * 255).round()) // Borda padr√£o para lidas no claro
                : notification.color.withAlpha(
                    (0.5 * 255).round()), // Borda mais vis√≠vel para n√£o lidas
            width: notification.isRead ? 0.5 : 1.0, // Largura da borda
          ),
        ),
        child: InkWell(
          // Torna o item inteiro clic√°vel com feedback visual (efeito ripple)
          onTap: () {
            _handleNotificationTap(
                notification); // Chama o m√©todo para manipular o toque
          },
          borderRadius:
              BorderRadius.circular(16), // Aplica o border radius ao InkWell
          child: Padding(
            padding: const EdgeInsets.all(12), // Padding interno do item
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // √çcone da notifica√ß√£o
                Container(
                  padding: const EdgeInsets.all(10),
                  decoration: BoxDecoration(
                    color: notification.color.withAlpha((0.2 * 255).round()),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(
                    notification.icon,
                    color:
                        notification.color, // Usa a cor definida na notifica√ß√£o
                    size: 20,
                  ),
                ),
                const SizedBox(width: 12), // Espa√ßo entre √≠cone e texto
                Expanded(
                  // Garante que o texto ocupe o espa√ßo restante
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Expanded(
                            // Garante que o t√≠tulo n√£o empurre o indicador de lida para fora
                            child: Text(
                              notification.title,
                              style: TextStyle(
                                fontSize: 14,
                                fontWeight: FontWeight.bold,
                                color: isDark
                                    ? Colors.white
                                    : theme.colorScheme.onSurface,
                              ),
                            ),
                          ),
                          // Indicador de notifica√ß√£o n√£o lida (ponto)
                          if (!notification.isRead)
                            Container(
                              width: 8,
                              height: 8,
                              decoration: BoxDecoration(
                                color: notification
                                    .color, // Usa a cor da notifica√ß√£o
                                shape: BoxShape.circle,
                              ),
                              margin: const EdgeInsets.only(
                                  left: 8), // Espa√ßo √† esquerda do ponto
                            )
                        ],
                      ),
                      const SizedBox(
                          height: 4), // Espa√ßo entre t√≠tulo e descri√ß√£o
                      Text(
                        notification.description,
                        style: TextStyle(
                          fontSize: 13,
                          color: isDark
                              ? Colors.white.withAlpha((0.7 * 255)
                                  .round()) // Cor para descri√ß√£o no modo escuro
                              : theme.colorScheme.onSurface.withAlpha((0.7 *
                                      255)
                                  .round()), // Cor para descri√ß√£o no modo claro
                        ),
                        maxLines: 3, // Limita o n√∫mero de linhas da descri√ß√£o
                        overflow: TextOverflow
                            .ellipsis, // Adiciona retic√™ncias se exceder
                      ),
                      const SizedBox(
                          height: 8), // Espa√ßo entre descri√ß√£o e hora
                      Text(
                        notification
                            .relativeTime, // Ex: "agora", "2 horas atr√°s" (precisa ser calculado no NotificationItem)
                        style: TextStyle(
                          fontSize: 11,
                          color: isDark
                              ? Colors.white.withAlpha((0.5 * 255)
                                  .round()) // Cor para hora no modo escuro
                              : theme.colorScheme.onSurface.withAlpha(
                                  (0.5 * 255)
                                      .round()), // Cor para hora no modo claro
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  // M√©todo para manipular toques em notifica√ß√µes (Novo M√©todo)
  void _handleNotificationTap(NotificationItem notification) {
    // Primeiro marca como lida (o ValueListenableBuilder reconstruir√° a lista)
    _notificationService.markAsRead(notification.id);

    // Fecha o overlay antes de navegar para evitar problemas de contexto
    Navigator.pop(context);

    // Em seguida, direciona o usu√°rio com base no tipo de notifica√ß√£o ou dados espec√≠ficos
    switch (notification.type) {
      case NotificationType.report:
        // Exemplo: Ir para o relat√≥rio do m√™s espec√≠fico
        // Assume que o campo 'data' na notifica√ß√£o tem 'month' e 'year'
        if (notification.data.containsKey('month') &&
            notification.data.containsKey('year')) {
          Navigator.of(context).pushNamed(
            '/report', // Substitua pela rota correta do seu relat√≥rio
            arguments: {
              'month': notification.data['month'],
              'year': notification.data['year'],
            },
          );
        } else {
          // Fallback para a tela geral de relat√≥rios se faltarem dados
          Navigator.of(context).pushNamed('/report');
        }
        break;

      case NotificationType.warning:
      case NotificationType.alert:
        // Exemplo: Se for alerta de or√ßamento, vai para a tela de or√ßamentos
        if (notification.id.startsWith('budget_')) {
          Navigator.of(context).pushNamed(
              '/budget/list'); // Substitua pela rota correta de or√ßamentos
        } else {
          // Fallback para o dashboard ou outra tela relevante para alertas
          Navigator.of(context).pushNamed('/dashboard');
        }
        break;

      case NotificationType.achievement:
        // Exemplo: Mostrar um di√°logo com detalhes da conquista
        _showAchievementDetails(notification);
        break;

      case NotificationType.success:
        // Exemplo: Se for meta atingida, ir para tela de metas
        if (notification.id.startsWith('goal_complete_')) {
          Navigator.of(context)
              .pushNamed('/goals'); // Substitua pela rota correta de metas
        } else {
          Navigator.of(context).pushNamed('/dashboard'); // Fallback
        }
        break;

      case NotificationType.reminder:
        // Exemplo: Se for pagamento pr√≥ximo, ir para despesas
        if (notification.id.startsWith('payment_due_')) {
          Navigator.of(context)
              .pushNamed('/costs'); // Substitua pela rota correta de despesas
        } else {
          Navigator.of(context).pushNamed('/dashboard'); // Fallback
        }
        break;

      case NotificationType.tip:
        // Exemplo: Ir para tela de dicas
        Navigator.of(context)
            .pushNamed('/tips'); // Substitua pela rota correta de dicas
        break;

      default:
        // Por padr√£o, vai para o dashboard se o tipo n√£o for reconhecido ou n√£o tiver a√ß√£o espec√≠fica
        Navigator.of(context).pushNamed('/dashboard');
        break;
    }
  }

  // M√©todo para mostrar detalhes de uma conquista (Novo M√©todo)
  void _showAchievementDetails(NotificationItem notification) {
    final theme = Theme.of(context);
    final isDark =
        theme.brightness == Brightness.dark; // Verifica o brilho do tema atual

    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          backgroundColor: isDark
              ? const Color(0xFF1A1A1A)
              : theme.cardColor, // Cor de fundo
          title: Row(
            children: [
              Icon(
                Icons.emoji_events,
                color: notification.color ??
                    Colors.amber, // Usa a cor da notifica√ß√£o ou √¢mbar padr√£o
              ),
              const SizedBox(width: 8),
              Expanded(
                // Garante que o texto n√£o exceda
                child: Text(
                  'Conquista Desbloqueada!', // T√≠tulo mais gen√©rico para o di√°logo
                  style: TextStyle(
                    fontSize: 18,
                    color: isDark ? Colors.white : theme.colorScheme.onSurface,
                    fontWeight: FontWeight.bold,
                  ),
                  overflow: TextOverflow
                      .ellipsis, // Adiciona retic√™ncias se o t√≠tulo for longo
                ),
              ),
            ],
          ),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment:
                CrossAxisAlignment.start, // Alinha conte√∫do √† esquerda
            children: [
              // T√≠tulo espec√≠fico da conquista (do NotificationItem)
              Text(
                notification.title,
                style: TextStyle(
                  fontSize:
                      16, // Tamanho um pouco menor que o t√≠tulo do di√°logo
                  fontWeight: FontWeight.w600, // Peso da fonte
                  color: isDark
                      ? Colors.white70
                      : theme.colorScheme.onSurface
                          .withAlpha((0.9 * 255).round()),
                ),
              ),
              const SizedBox(
                  height: 12), // Espa√ßo entre t√≠tulo e descri√ß√£o da conquista
              // Descri√ß√£o da conquista (do NotificationItem)
              Text(
                notification.description,
                style: TextStyle(
                  fontSize: 14,
                  color: isDark
                      ? Colors.white54
                      : theme.colorScheme.onSurface
                          .withAlpha((0.7 * 255).round()),
                ),
              ),
              // Aqui voc√™ pode adicionar mais detalhes baseados em notification.data, se necess√°rio
              if (notification.data.containsKey('value'))
                Text('Valor: R\$${notification.data['value']}'),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: Text(
                'Fechar',
                style: TextStyle(color: theme.colorScheme.primary),
              ),
            ),
          ],
          shape: RoundedRectangleBorder(
            // Borda arredondada
            borderRadius: BorderRadius.circular(16),
          ),
        );
      },
    );
  }

  // Adicione este m√©todo na classe _HomeScreenState
  void _showHomeScreenHelp(BuildContext context) {
    showDialog(
      context: context,
      barrierDismissible: true,
      builder: (context) {
        return Dialog(
          backgroundColor: Colors.transparent,
          elevation: 0,
          child: GlassContainer(
            frostedEffect: true,
            blur: 10,
            opacity: 0.2,
            borderRadius: 24,
            borderColor: Colors.white.withAlpha((0.3 * 255).round()),
            child: Container(
              width: double.maxFinite,
              padding: const EdgeInsets.all(24),
              child: SingleChildScrollView(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Cabe√ßalho
                    SlideAnimation.fromTop(
                      child: Row(
                        children: [
                          CircleAvatar(
                            backgroundColor: const Color(0xFF6200EE),
                            child: Icon(
                              Icons.help_outline,
                              color: Colors.white,
                            ),
                          ),
                          const SizedBox(width: 16),
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  "Guia da Tela Principal",
                                  style: TextStyle(
                                    fontSize: 20,
                                    fontWeight: FontWeight.bold,
                                    color: Colors.black87,
                                  ),
                                ),
                                Text(
                                  "Conhecendo todas as funcionalidades",
                                  style: TextStyle(
                                    fontSize: 14,
                                    color: Colors.black54,
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                    ),

                    const SizedBox(height: 20),
                    const Divider(),
                    const SizedBox(height: 16),

                    // Se√ß√£o 1: Barra Superior de Notifica√ß√µes
                    SlideAnimation.fromLeft(
                      delay: const Duration(milliseconds: 100),
                      child: _buildHelpSection(
                        title: "1. Barra de Navega√ß√£o Superior",
                        icon: Icons.notifications_outlined,
                        iconColor: Colors.deepPurple,
                        content:
                            "Na parte superior do aplicativo voc√™ encontra:\n\n"
                            "‚Ä¢ √çcone de Notifica√ß√µes: Mostra alertas importantes sobre suas finan√ßas\n\n"
                            "‚Ä¢ Bot√£o de Busca: Encontre rapidamente qualquer funcionalidade",
                      ),
                    ),

                    const SizedBox(height: 20),

                    // Se√ß√£o 2: Categorias
                    SlideAnimation.fromRight(
                      delay: const Duration(milliseconds: 200),
                      child: _buildHelpSection(
                        title: "2. Categorias",
                        icon: Icons.category,
                        iconColor: const Color.fromARGB(255, 15, 111, 201),
                        content:
                            "As categorias ajudam a filtrar as funcionalidades dispon√≠veis:\n\n"
                            "‚Ä¢ Principais: Mostra todas as funcionalidades\n"
                            "‚Ä¢ Financeiro: Filtra por op√ß√µes de controle financeiro\n"
                            "‚Ä¢ Gest√£o: Mostra op√ß√µes para gerenciar seus dados\n"
                            "‚Ä¢ Relat√≥rios: Exibe op√ß√µes de relat√≥rios e an√°lises",
                      ),
                    ),

                    const SizedBox(height: 20),

                    // Se√ß√£o 3: Grid de Funcionalidades
                    SlideAnimation.fromLeft(
                      delay: const Duration(milliseconds: 300),
                      child: _buildHelpSection(
                        title: "3. Funcionalidades",
                        icon: Icons.apps,
                        iconColor: Colors.orange,
                        content:
                            "O grid central mostra todas as funcionalidades dispon√≠veis:\n\n"
                            "‚Ä¢ Or√ßamentos: Gerencie seus or√ßamentos mensais\n"
                            "‚Ä¢ Despesas: Registre e controle seus gastos\n"
                            "‚Ä¢ Receitas: Adicione suas fontes de renda\n"
                            "‚Ä¢ Dashboard: Visualize seu panorama financeiro\n"
                            "‚Ä¢ Relat√≥rios: Acesse relat√≥rios detalhados\n"
                            "‚Ä¢ Produtos: Gerencie seus itens cadastrados\n"
                            "‚Ä¢ Dicas: Receba conselhos financeiros\n"
                            "‚Ä¢ Tend√™ncias: Analise padr√µes de gastos e receitas",
                      ),
                    ),

                    const SizedBox(height: 20),

                    // Se√ß√£o 4: Alternador de Visualiza√ß√£o
                    SlideAnimation.fromRight(
                      delay: const Duration(milliseconds: 400),
                      child: _buildHelpSection(
                        title: "4. Modo de Visualiza√ß√£o",
                        icon: Icons.view_list,
                        iconColor: Colors.teal,
                        content:
                            "Voc√™ pode alternar entre dois modos de visualiza√ß√£o:\n\n"
                            "‚Ä¢ Grade (√≠cone de grade): Visualiza√ß√£o compacta em blocos\n\n"
                            "‚Ä¢ Lista (√≠cone de lista): Visualiza√ß√£o detalhada em formato de lista, com descri√ß√µes",
                      ),
                    ),

                    const SizedBox(height: 20),

                    // Se√ß√£o 5: Barra de Navega√ß√£o Inferior
                    SlideAnimation.fromLeft(
                      delay: const Duration(milliseconds: 500),
                      child: _buildHelpSection(
                        title: "5. Barra de Navega√ß√£o Inferior",
                        icon: Icons.menu,
                        iconColor: Colors.indigo,
                        content:
                            "Acesso r√°pido a funcionalidades essenciais:\n\n"
                            "‚Ä¢ Temas: Personalize a apar√™ncia do aplicativo\n"
                            "‚Ä¢ Metas: Acesse suas metas financeiras\n"
                            "‚Ä¢ Saldo: Visualize seu saldo atual detalhado\n"
                            "‚Ä¢ Dicas: Receba conselhos financeiros √∫teis",
                      ),
                    ),

                    const SizedBox(height: 20),

                    // Dicas
                    FadeAnimation(
                      delay: const Duration(milliseconds: 600),
                      child: Container(
                        padding: const EdgeInsets.all(16),
                        decoration: BoxDecoration(
                          color: const Color(0xFF6200EE)
                              .withAlpha((0.1 * 255).round()),
                          borderRadius: BorderRadius.circular(12),
                          border: Border.all(
                            color: const Color(0xFF6200EE)
                                .withAlpha((0.3 * 255).round()),
                          ),
                        ),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Row(
                              children: [
                                Icon(
                                  Icons.lightbulb_outline,
                                  color: const Color(0xFF6200EE),
                                ),
                                const SizedBox(width: 8),
                                Text(
                                  "Dica √∫til",
                                  style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    color: const Color(0xFF6200EE),
                                  ),
                                ),
                              ],
                            ),
                            const SizedBox(height: 8),
                            Text(
                              "Clique no √≠cone de ajuda em cada tela para obter guias detalhados de como usar cada funcionalidade!",
                              style: TextStyle(color: Colors.black87),
                            ),
                          ],
                        ),
                      ),
                    ),

                    const SizedBox(height: 24),

                    // Bot√£o para fechar
                    Center(
                      child: ScaleAnimation.bounceIn(
                        delay: const Duration(milliseconds: 700),
                        child: PressableCard(
                          onPress: () => Navigator.pop(context),
                          decoration: BoxDecoration(
                            color: const Color(0xFF6200EE),
                            borderRadius: BorderRadius.circular(30),
                          ),
                          padding: const EdgeInsets.symmetric(
                              horizontal: 24, vertical: 12),
                          child: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              const Icon(
                                Icons.check_circle_outline,
                                color: Colors.white,
                              ),
                              const SizedBox(width: 8),
                              const Text(
                                "Entendi!",
                                style: TextStyle(
                                  color: Colors.white,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  // M√©todo para exibir a ajuda do card financeiro com anima√ß√µes
  void _showFinancialCardHelp(BuildContext context) {
    showDialog(
      context: context,
      barrierDismissible: true,
      builder: (context) {
        return Dialog(
          backgroundColor: Colors.transparent,
          elevation: 0,
          child: GlassContainer(
            frostedEffect: true,
            blur: 10,
            opacity: 0.2,
            borderRadius: 24,
            borderColor: Colors.white.withAlpha((0.3 * 255).round()),
            child: Container(
              width: double.maxFinite,
              padding: const EdgeInsets.all(24),
              child: SingleChildScrollView(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Cabe√ßalho
                    SlideAnimation.fromTop(
                      child: Row(
                        children: [
                          CircleAvatar(
                            backgroundColor: const Color(0xFF6200EE),
                            child: Icon(
                              Icons.insights,
                              color: Colors.white,
                            ),
                          ),
                          const SizedBox(width: 16),
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  "Entendendo seu Resumo Financeiro",
                                  style: TextStyle(
                                    fontSize: 20,
                                    fontWeight: FontWeight.bold,
                                    color: Colors.black87,
                                  ),
                                ),
                                Text(
                                  "Um guia simples para entender seus n√∫meros",
                                  style: TextStyle(
                                    fontSize: 14,
                                    color: Colors.black54,
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                    ),

                    const SizedBox(height: 20),
                    const Divider(),
                    const SizedBox(height: 16),

                    // Explica√ß√£o do Saldo Atual
                    SlideAnimation.fromLeft(
                      delay: const Duration(milliseconds: 100),
                      child: _buildHelpSection(
                        title: "1. Saldo Atual",
                        icon: Icons.account_balance_wallet,
                        iconColor: Colors.green,
                        content:
                            "√â o valor total que voc√™ possui atualmente.\n\n"
                            "Calculado como: Receitas totais - Despesas totais.\n\n"
                            "Este valor mostra rapidamente se voc√™ est√° no positivo ou negativo.",
                      ),
                    ),

                    const SizedBox(height: 20),

                    // Explica√ß√£o da Varia√ß√£o Percentual
                    SlideAnimation.fromRight(
                      delay: const Duration(milliseconds: 200),
                      child: _buildHelpSection(
                        title: "2. Varia√ß√£o Percentual",
                        icon: Icons.trending_up,
                        iconColor: Colors.blue,
                        content:
                            "O n√∫mero com seta (ex: +12.5%) mostra como seu saldo est√° mudando.\n\n"
                            "‚Ä¢ Seta VERDE para cima: sua situa√ß√£o est√° melhorando\n"
                            "‚Ä¢ Seta VERMELHA para baixo: precisa de aten√ß√£o\n\n"
                            "√â calculada comparando seu saldo atual com o do per√≠odo anterior.",
                      ),
                    ),

                    const SizedBox(height: 20),

                    // Explica√ß√£o das Barras de Progresso
                    SlideAnimation.fromLeft(
                      delay: const Duration(milliseconds: 300),
                      child: _buildHelpSection(
                        title: "3. Barras de Progresso",
                        icon: Icons.bar_chart,
                        iconColor: Colors.orange,
                        content:
                            "As barras mostram o andamento dos seus gastos e economias.\n\n"
                            "‚Ä¢ Meta de Economia: quanto voc√™ j√° alcan√ßou da meta de economia (30% da receita total)\n\n"
                            "‚Ä¢ Gastos do Or√ßamento: quanto voc√™ j√° gastou do or√ßamento planejado (70% da receita total)",
                      ),
                    ),

                    const SizedBox(height: 20),

                    SlideAnimation.fromLeft(
                      delay: const Duration(milliseconds: 300),
                      child: _buildHelpSection(
                        title: "4. Funcionalidade",
                        icon: Icons.bar_chart,
                        iconColor: const Color.fromARGB(255, 231, 16, 177),
                        content:
                            "‚Ä¢A tela pode ser vista em gri ou lista basta clicar no icone do lado direito acima dos filtros.\n\n"
                            "‚Ä¢ Voc√™ pode optar por usar filtros para ver apenas as funcionalidades que voc√™ que no momento\n\n"
                            "‚Ä¢ No rodap√© da pagina voc√™ tem 4 icones, explore e se precisar de ajuda pra enteder clique no simb√≥lo de INTERROGA√á√ÉO no topo da tela",
                      ),
                    ),

                    const SizedBox(height: 20),

                    // Dicas
                    FadeAnimation(
                      delay: const Duration(milliseconds: 500),
                      child: Container(
                        padding: const EdgeInsets.all(16),
                        decoration: BoxDecoration(
                          color: const Color(0xFF6200EE)
                              .withAlpha((0.1 * 255).round()),
                          borderRadius: BorderRadius.circular(12),
                          border: Border.all(
                            color: const Color(0xFF6200EE)
                                .withAlpha((0.3 * 255).round()),
                          ),
                        ),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Row(
                              children: [
                                Icon(
                                  Icons.lightbulb_outline,
                                  color: const Color(0xFF6200EE),
                                ),
                                const SizedBox(width: 8),
                                Text(
                                  "Dica √∫til",
                                  style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    color: const Color(0xFF6200EE),
                                  ),
                                ),
                              ],
                            ),
                            const SizedBox(height: 8),
                            Text(
                              "Toque no card de resumo financeiro para ver mais detalhes no Dashboard completo!",
                              style: TextStyle(color: Colors.black87),
                            ),
                          ],
                        ),
                      ),
                    ),

                    const SizedBox(height: 24),

                    // Bot√£o para fechar
                    Center(
                      child: ScaleAnimation.bounceIn(
                        delay: const Duration(milliseconds: 600),
                        child: PressableCard(
                          onPress: () => Navigator.pop(context),
                          decoration: BoxDecoration(
                            color: const Color(0xFF6200EE),
                            borderRadius: BorderRadius.circular(30),
                          ),
                          padding: const EdgeInsets.symmetric(
                              horizontal: 24, vertical: 12),
                          child: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              const Icon(
                                Icons.check_circle_outline,
                                color: Colors.white,
                              ),
                              const SizedBox(width: 8),
                              const Text(
                                "Entendi!",
                                style: TextStyle(
                                  color: Colors.white,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  // Widget para cada se√ß√£o da ajuda
  Widget _buildHelpSection({
    required String title,
    required IconData icon,
    required Color iconColor,
    required String content,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Container(
              padding: const EdgeInsets.all(10),
              decoration: BoxDecoration(
                color: iconColor.withAlpha((0.2 * 255).round()),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Icon(
                icon,
                color: iconColor,
                size: 24,
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Text(
                title,
                style: const TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.black87,
                ),
              ),
            ),
          ],
        ),
        const SizedBox(height: 12),
        Padding(
          padding: const EdgeInsets.only(left: 12),
          child: Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(12),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withAlpha((0.05 * 255).round()),
                  blurRadius: 5,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: Text(
              content,
              style: const TextStyle(
                fontSize: 16,
                color: Colors.black87,
                height: 1.5,
              ),
            ),
          ),
        ),
      ],
    );
  }

  // Retorna o √≠cone apropriado para cada √≠ndice de funcionalidade
  IconData _getIconForIndex(int index) {
    switch (index) {
      case 0:
        return Icons.account_balance_wallet_outlined; //contas
      case 1:
        return Icons.money_off; // Despesas
      case 2:
        return Icons.attach_money; // Receitas
      case 3:
        return Icons.dashboard; // Dashboard
      case 4:
        return Icons.bar_chart; // Relat√≥rios
      case 5:
        return Icons.inventory_2; // Gerenciar Produtos
      case 6:
        return Icons.lightbulb_outline; // Dicas
      case 7:
        return Icons.trending_up; // Tend√™ncias
      case 8:
        return Icons.flag; // Metas
      case 9: // <-- NOVO ITEM
        return Icons.account_balance_wallet; // Or√ßamento
      default:
        return Icons.apps;
    }
  }
}

// Delegado de busca
class AppSearchDelegate extends SearchDelegate<String> {
  @override
  ThemeData appBarTheme(BuildContext context) {
    final theme = Theme.of(context);
    final themeManager = Provider.of<ThemeManager>(context, listen: false);
    final isDark = themeManager.currentThemeType != ThemeType.light;

    return theme.copyWith(
      inputDecorationTheme: InputDecorationTheme(
        hintStyle: TextStyle(color: isDark ? Colors.white54 : Colors.black54),
        border: InputBorder.none, // Remove a borda padr√£o
      ),
      appBarTheme: AppBarTheme(
        backgroundColor:
            themeManager.getCurrentPrimaryColor(), // Usa a cor prim√°ria do tema
        iconTheme: IconThemeData(color: theme.colorScheme.onPrimary),
        titleTextStyle: TextStyle(
            color: theme.colorScheme.onPrimary,
            fontSize: 18,
            fontWeight: FontWeight.bold),
      ),
      // Adiciona a cor de fundo do Scaffold para a tela de busca
      scaffoldBackgroundColor: isDark ? const Color(0xFF1A1A1A) : Colors.white,
    );
  }

  final List<String> _searchItems = [
    'Or√ßamentos',
    'Despesas',
    'Receitas',
    'Dashboard',
    'Relat√≥rios',
    'Gerenciar Produtos',
    'Dicas Importantes',
    'Tend√™ncias',
    'Metas Financeiras',
    'Contas', // <-- NOVO ITEM
  ];

  @override
  List<Widget> buildActions(BuildContext context) {
    final themeManager = Provider.of<ThemeManager>(context, listen: false);
    final isDark = themeManager.currentThemeType != ThemeType.light;

    return [
      IconButton(
        icon:
            Icon(Icons.clear, color: isDark ? Colors.white70 : Colors.black54),
        onPressed: () {
          query = '';
        },
      ),
    ];
  }

  @override
  Widget buildLeading(BuildContext context) {
    final themeManager = Provider.of<ThemeManager>(context, listen: false);
    final isDark = themeManager.currentThemeType != ThemeType.light;

    return IconButton(
      icon: Icon(Icons.arrow_back,
          color: isDark ? Colors.white70 : Colors.black54),
      onPressed: () {
        close(context, '');
      },
    );
  }

  @override
  Widget buildResults(BuildContext context) {
    final results = _searchItems
        .where((item) => item.toLowerCase().contains(query.toLowerCase()))
        .toList();

    return _buildSearchResults(context, results);
  }

  @override
  Widget buildSuggestions(BuildContext context) {
    final themeManager = Provider.of<ThemeManager>(context, listen: false);
    final isDark = themeManager.currentThemeType != ThemeType.light;
    final suggestionColor = isDark ? Colors.white70 : Colors.black87;

    if (query.isEmpty) {
      // Pode retornar pesquisas recentes aqui, se houver
      return ListView(
        children: [
          ListTile(
            leading: Icon(Icons.search,
                color: isDark ? Colors.white54 : Colors.black45),
            title: Text('Digite sua busca',
                style: TextStyle(color: suggestionColor)),
          )
        ],
      );
    }

    final results = _searchItems
        .where((item) => item.toLowerCase().contains(query.toLowerCase()))
        .toList();

    return _buildSearchResults(context, results);
  }

  Widget _buildSearchResults(BuildContext context, List<String> results) {
    final themeManager = Provider.of<ThemeManager>(context);
    final isDark = themeManager.currentThemeType != ThemeType.light;

    if (results.isEmpty) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.search_off,
                size: 64,
                color: themeManager
                    .getCurrentPrimaryColor()
                    .withAlpha((0.5 * 255).round())),
            const SizedBox(height: 16),
            Text(
              'Nenhum resultado encontrado',
              style: TextStyle(
                  fontSize: 16,
                  color: isDark
                      ? Colors.white.withAlpha((0.7 * 255).round())
                      : Theme.of(context)
                          .colorScheme
                          .onSurface
                          .withAlpha((0.7 * 255).round())),
            ),
          ],
        ),
      );
    }

    return ListView.builder(
      itemCount: results.length,
      itemBuilder: (context, index) {
        return ListTile(
          leading: Icon(
            Icons.search,
            color: isDark
                ? Colors.white70
                : themeManager
                    .getCurrentPrimaryColor()
                    .withAlpha((0.7 * 255).round()),
          ),
          title: Text(
            results[index],
            style: TextStyle(
              fontWeight: FontWeight.w500,
              color: isDark
                  ? Colors.white
                  : Theme.of(context).colorScheme.onSurface,
            ),
          ),
          onTap: () {
            Navigator.pop(context); // Fecha a busca
            Navigator.pushNamed(
              context,
              _getRouteFromSearchResult(results[index]),
            );
          },
        );
      },
    );
  }

  String _getRouteFromSearchResult(String result) {
    // Mapeia os resultados de busca para rotas
    switch (result.toLowerCase()) {
      case 'contas': // <-- NOVO CASE
        return '/accounts';
      case 'despesas':
        return '/costs';
      case 'receitas':
        return '/revenues';
      case 'dashboard':
        return '/dashboard';
      case 'relat√≥rios':
        return '/report';
      case 'gerenciar produtos':
        return '/items/manage';
      case 'dicas importantes':
        return '/tips';
      case 'tend√™ncias':
        return '/trend';
      case 'metas financeiras':
        return '/goals';
      case 'or√ßamentos':
        return '/budget/list';
      default:
        return '/home'; // Rota padr√£o
    }
  }
}

// Painter para o fundo com padr√£o geom√©trico suave e n√£o piscante
class _SafeBackgroundPatternPainter extends CustomPainter {
  final Color primaryColor;
  final bool isDark;
  final double animationValue; // NOVO: valor da anima√ß√£o
  final math.Random random = math.Random(42); // Seed fixo para padr√£o est√°tico

  _SafeBackgroundPatternPainter({
    required this.primaryColor,
    required this.isDark,
    required this.animationValue, // NOVO: recebe valor da anima√ß√£o
  });

  @override
  void paint(Canvas canvas, Size size) {
    final shapePaint = Paint()
      ..color = isDark
          ? Colors.white.withAlpha((0.03 * 255).round()) // MAIS SUTIL ainda!
          : primaryColor.withAlpha((0.02 * 255).round()) // MAIS SUTIL ainda!
      ..style = PaintingStyle.fill;

    // Criar padr√£o de formas geom√©tricas com movimento MUITO mais lento
    final cellSize = size.width / 8;

    for (int i = -1; i < 12; i++) {
      for (int j = -1; j < 25; j++) {
        // Movimento MUITO mais sutil e lento
        final slowMovement = math.sin(animationValue * 2 * math.pi) *
            2.0; // S√≥ 2 pixels de movimento!
        final x = i * cellSize +
            random.nextDouble() * (cellSize * 0.2) +
            slowMovement;
        final y = j * cellSize +
            random.nextDouble() * (cellSize * 0.2) +
            slowMovement * 0.5;

        final shapeType = (i + j) % 4; // Mais variedade de formas

        // Opacidade que varia SUTILMENTE com a anima√ß√£o
        final baseOpacity = isDark ? 0.02 : 0.015;
        final animatedOpacity =
            baseOpacity + (math.sin(animationValue * 2 * math.pi) * 0.005);

        shapePaint.color = isDark
            ? Colors.white.withAlpha((animatedOpacity * 255).round())
            : primaryColor.withAlpha((animatedOpacity * 255).round());

        switch (shapeType) {
          case 0:
            // C√≠rculos menores e mais suaves
            canvas.drawCircle(
              Offset(x, y),
              random.nextDouble() * 3 + 1, // Tamanho reduzido
              shapePaint,
            );
            break;
          case 1:
            // Quadrados menores
            canvas.drawRect(
              Rect.fromCenter(
                center: Offset(x, y),
                width: random.nextDouble() * 4 + 2,
                height: random.nextDouble() * 4 + 2,
              ),
              shapePaint,
            );
            break;
          case 2:
            // Tri√¢ngulos menores
            final path = Path();
            final size = random.nextDouble() * 3 + 1;
            path.moveTo(x, y - size);
            path.lineTo(x - size, y + size);
            path.lineTo(x + size, y + size);
            path.close();
            canvas.drawPath(path, shapePaint);
            break;
          case 3:
            // Linhas curtas e sutis
            canvas.drawLine(
              Offset(x - 2, y),
              Offset(x + 2, y),
              shapePaint..strokeWidth = 0.5,
            );
            break;
        }
      }
    }
  }

  @override
  bool shouldRepaint(_SafeBackgroundPatternPainter oldDelegate) =>
      oldDelegate.isDark != isDark ||
      oldDelegate.primaryColor != primaryColor ||
      oldDelegate.animationValue !=
          animationValue; // NOVO: repinta quando anima√ß√£o muda
}

extension GlassContainerExtension on GlassContainer {
  static GlassContainer create({
    required Widget child,
    double borderRadius = 16,
    double opacity = 0.1,
    Color? borderColor,
  }) {
    return GlassContainer(
      frostedEffect: true,
      borderRadius: borderRadius,
      opacity: opacity,
      borderColor: borderColor,
      child: child,
    );
  }
}

class _CentralMenuBottomSheet extends StatefulWidget {
  final ThemeData theme;
  final ThemeManager themeManager;

  const _CentralMenuBottomSheet({
    required this.theme,
    required this.themeManager,
  });

  @override
  State<_CentralMenuBottomSheet> createState() =>
      _CentralMenuBottomSheetState();
}

class _CentralMenuBottomSheetState extends State<_CentralMenuBottomSheet>
    with TickerProviderStateMixin {
  late AnimationController _slideController;
  late AnimationController _bounceController;
  late AnimationController _murphyController; // üëª MURPHY NO MENU!

  late Animation<Offset> _slideAnimation;
  late Animation<double> _bounceAnimation;
  late Animation<double> _murphyBounce;

  bool _murphyModeActive = false;
  int _murphyTapCount = 0;

  @override
  void initState() {
    super.initState();

    _slideController = AnimationController(
      duration: const Duration(milliseconds: 500),
      vsync: this,
    );

    _bounceController = AnimationController(
      duration: const Duration(milliseconds: 1200),
      vsync: this,
    );

    _murphyController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );

    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 1),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutCubic,
    ));

    _bounceAnimation = Tween<double>(
      begin: 0.8,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _bounceController,
      curve: Curves.elasticOut,
    ));

    _murphyBounce = Tween<double>(
      begin: 1.0,
      end: 1.2,
    ).animate(CurvedAnimation(
      parent: _murphyController,
      curve: Curves.elasticInOut,
    ));

    _slideController.forward();
    _bounceController.forward();
  }

  void _activateMurphyMode() {
    _murphyTapCount++;

    if (_murphyTapCount >= 5) {
      setState(() => _murphyModeActive = true);
      _murphyController.repeat(reverse: true);

      HapticFeedback.heavyImpact();

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: const Text('üëª MURPHY INVADIU O MENU! üíÄ'),
          backgroundColor: Colors.purple,
          action: SnackBarAction(
            label: 'ü•ú 3 Pa√ßocas',
            textColor: Colors.white,
            onPressed: () {
              setState(() {
                _murphyModeActive = false;
                _murphyTapCount = 0;
              });
              _murphyController.stop();
              _murphyController.reset();
            },
          ),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final isDark = widget.themeManager.currentThemeType != ThemeType.light;

    return SlideTransition(
      position: _slideAnimation,
      child: Container(
        height: MediaQuery.of(context).size.height * 0.75,
        decoration: BoxDecoration(
          // ‚úÖ SEMPRE BRANCO (igual tema claro)
          color: Colors
              .white, // Removeu o isDark ? Color(0xFF1A1A1A) : Colors.white
          borderRadius: const BorderRadius.only(
            topLeft: Radius.circular(24),
            topRight: Radius.circular(24),
          ),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withValues(alpha: 0.3),
              blurRadius: 20,
              offset: const Offset(0, -5),
            ),
          ],
        ),
        child: Column(
          children: [
            _buildMenuHeader(),
            Expanded(child: _buildMenuContent()),
          ],
        ),
      ),
    );
  }

  Widget _buildMenuHeader() {
    final isDark = widget.themeManager.currentThemeType != ThemeType.light;

    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            widget.theme.colorScheme.primary,
            widget.theme.colorScheme.primary.withValues(alpha: 0.8),
          ],
        ),
        borderRadius: const BorderRadius.only(
          topLeft: Radius.circular(24),
          topRight: Radius.circular(24),
        ),
      ),
      child: Row(
        children: [
          // √çcone animado
          ScaleAnimation.bounceIn(
            child: Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.white.withValues(alpha: 0.2),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Icon(
                Icons.apps,
                color: Colors.white,
                size: 28,
              ),
            ),
          ),

          const SizedBox(width: 16),

          // T√≠tulo
          Expanded(
            child: SlideAnimation.fromLeft(
              delay: const Duration(milliseconds: 200),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    'Menu Principal',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  Text(
                    'Acesse todas as funcionalidades',
                    style: TextStyle(
                      color: Colors.white.withValues(alpha: 0.8),
                      fontSize: 12,
                    ),
                  ),
                ],
              ),
            ),
          ),

          // üëª MURPHY SECRETO (Easter Egg)
          GestureDetector(
            onTap: _activateMurphyMode,
            child: AnimatedBuilder(
              animation: _murphyBounce,
              builder: (context, child) {
                return Transform.scale(
                  scale: _murphyModeActive ? _murphyBounce.value : 1.0,
                  child: Container(
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: _murphyModeActive
                          ? Colors.purple.withValues(alpha: 0.3)
                          : Colors.white.withValues(alpha: 0.1),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Text(
                      _murphyModeActive ? 'üëªüíÉ' : 'üî•',
                      style: const TextStyle(fontSize: 16),
                    ),
                  ),
                );
              },
            ),
          ),

          // Bot√£o fechar
          SlideAnimation.fromRight(
            delay: const Duration(milliseconds: 300),
            child: IconButton(
              onPressed: () => Navigator.pop(context),
              icon: const Icon(
                Icons.close,
                color: Colors.white,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildMenuContent() {
    return Expanded(
      child: SingleChildScrollView(
        padding: const EdgeInsets.all(20),
        child: Column(
          children: [
            // üéñÔ∏è SE√á√ÉO CONQUISTAS
            _buildMenuSection(
              title: 'üèÜ Conquistas & Gamifica√ß√£o',
              items: [
                _MenuItemData(
                  icon: Icons.emoji_events,
                  title: 'Galeria de Conquistas',
                  subtitle: 'Veja suas conquistas desbloqueadas',
                  route: '/achievements',
                  color: Colors.amber,
                ),
                _MenuItemData(
                  icon: Icons.flag,
                  title: 'Metas Financeiras',
                  subtitle: 'Defina e acompanhe suas metas',
                  route: '/goals',
                  color: Colors.green,
                ),
              ],
            ),

            const SizedBox(height: 24),

            // üì± SE√á√ÉO APP
            _buildMenuSection(
              title: 'üì± Sobre & Suporte',
              items: [
                _MenuItemData(
                  icon: Icons.info_outline,
                  title: 'Sobre o App',
                  subtitle: 'Informa√ß√µes e vers√£o',
                  onTap: () => _showAboutDialog(),
                  color: Colors.blue,
                ),
                _MenuItemData(
                  icon: Icons.star_rate,
                  title: 'Avalie o App',
                  subtitle: 'Deixe sua avalia√ß√£o na loja',
                  onTap: () => _rateApp(),
                  color: Colors.orange,
                ),
                _MenuItemData(
                  icon: Icons.coffee,
                  title: 'ü•ú Me pague uma Pa√ßoca',
                  subtitle: 'Apoie o desenvolvedor a continuar seus projetos',
                  onTap: () => _showPacoca(),
                  color: Colors.brown,
                ),
              ],
            ),

            const SizedBox(height: 40),
          ],
        ),
      ),
    );
  }

  Widget _buildMenuSection({
    required String title,
    required List<_MenuItemData> items,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // T√≠tulo da se√ß√£o
        SlideAnimation.fromLeft(
          child: Padding(
            padding: const EdgeInsets.only(bottom: 12),
            child: Text(
              title,
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: widget.theme.colorScheme.primary,
              ),
            ),
          ),
        ),

        // Items da se√ß√£o
        ...items.asMap().entries.map((entry) {
          final index = entry.key;
          final item = entry.value;

          return SlideAnimation.fromRight(
            delay: Duration(milliseconds: 200 + (index * 100)),
            child: Container(
              margin: const EdgeInsets.only(bottom: 8),
              child: _buildMenuItem(item),
            ),
          );
        }),
      ],
    );
  }

  Widget _buildMenuItem(_MenuItemData item) {
    return AnimatedBuilder(
      animation: _bounceAnimation,
      builder: (context, child) {
        return Transform.scale(
          scale: _bounceAnimation.value,
          child: InkWell(
            onTap: () {
              Navigator.pop(context);
              if (item.route != null) {
                Navigator.pushNamed(context, item.route!);
              } else if (item.onTap != null) {
                item.onTap!();
              }
            },
            borderRadius: BorderRadius.circular(12),
            child: Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: item.color.withValues(alpha: 0.05), // ‚úÖ SEMPRE 0.05
                borderRadius: BorderRadius.circular(12),
                border: Border.all(
                  color: item.color.withValues(alpha: 0.3),
                  width: 1,
                ),
              ),
              child: Row(
                children: [
                  // √çcone
                  Container(
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: item.color.withValues(alpha: 0.2),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Icon(
                      item.icon,
                      color: item.color,
                      size: 24,
                    ),
                  ),

                  const SizedBox(width: 16),

                  // Textos
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          item.title,
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                            color: Colors.black87, // ‚úÖ SEMPRE PRETO
                          ),
                        ),
                        const SizedBox(height: 4),
                        Text(
                          item.subtitle,
                          style: TextStyle(
                            fontSize: 12,
                            color: Colors.grey.shade600, // ‚úÖ SEMPRE CINZA
                          ),
                        ),
                      ],
                    ),
                  ),

                  // Seta
                  Icon(
                    Icons.chevron_right,
                    color: item.color,
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  // üé≠ M√âTODOS DE A√á√ÉO
  void _showAboutDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('üì± Sobre o Economize'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text('Vers√£o: 1.0.100'),
            const SizedBox(height: 8),
            const Text('Desenvolvido com ‚ù§Ô∏è para ajudar voc√™ a economizar!'),
            const SizedBox(height: 8),
            const Text(
                'Agradecimentos especiais aos Testers e usu√°rios que contribu√≠ram com feedback!'),
            const SizedBox(height: 16),
            // Links das pol√≠ticas
            TextButton.icon(
              icon: const Icon(Icons.privacy_tip, size: 18),
              label: const Text('Pol√≠tica de Privacidade'),
              onPressed: () async {
                const url = 'https://union.dev.br/politica-de-privacidade.html';
                if (await canLaunchUrl(Uri.parse(url))) {
                  await launchUrl(Uri.parse(url),
                      mode: LaunchMode.externalApplication);
                }
              },
            ),
            TextButton.icon(
              icon: const Icon(Icons.shield_outlined, size: 18),
              label: const Text('Pol√≠tica de Coleta de Dados'),
              onPressed: () async {
                const url =
                    'https://union.dev.br/politica-de-coleta-de-dados.html';
                if (await canLaunchUrl(Uri.parse(url))) {
                  await launchUrl(Uri.parse(url),
                      mode: LaunchMode.externalApplication);
                }
              },
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Fechar'),
          ),
        ],
      ),
    );
  }

  Future<void> _rateApp() async {
    const String playStoreUrl =
        'https://play.google.com/store/apps/details?id=com.lucianoribeiro.economize';

    try {
      // Tentar abrir a Play Store diretamente (se instalada)
      const String playStoreAppUrl =
          'market://details?id=com.lucianoribeiro.economize';

      if (await canLaunchUrl(Uri.parse(playStoreAppUrl))) {
        await launchUrl(
          Uri.parse(playStoreAppUrl),
          mode: LaunchMode.externalApplication,
        );
      } else {
        // Fallback para o navegador
        if (await canLaunchUrl(Uri.parse(playStoreUrl))) {
          await launchUrl(
            Uri.parse(playStoreUrl),
            mode: LaunchMode.externalApplication,
          );
        } else {
          throw 'N√£o foi poss√≠vel abrir a Play Store';
        }
      }

      // Mostrar feedback de sucesso
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Row(
              children: [
                Icon(Icons.open_in_new, color: Colors.white),
                SizedBox(width: 8),
                Text('‚≠ê Abrindo Play Store...'),
              ],
            ),
            backgroundColor: Colors.orange,
            duration: Duration(seconds: 2),
          ),
        );
      }
    } catch (e) {
      // Fallback: copiar link para clipboard
      await _copyLinkToClipboard(playStoreUrl);
    }
  }

// ‚úÖ M√âTODO AUXILIAR PARA COPIAR LINK
  Future<void> _copyLinkToClipboard(String url) async {
    try {
      await Clipboard.setData(ClipboardData(text: url));

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: const Row(
              children: [
                Icon(Icons.content_copy, color: Colors.white),
                SizedBox(width: 8),
                Expanded(
                  child: Text(
                      'üìã Link copiado! Cole no navegador para avaliar o app'),
                ),
              ],
            ),
            backgroundColor: Colors.blue,
            duration: const Duration(seconds: 4),
            action: SnackBarAction(
              label: 'OK',
              textColor: Colors.white,
              onPressed: () {},
            ),
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('‚ùå Erro ao copiar link'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  void _showPacoca() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.white,
        title: Row(
          children: [
            const Text('ü•ú Me Pague \numa Pa√ßoquinha'),
            const Spacer(),
            // Easter egg: contador de pa√ßocas
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
              decoration: BoxDecoration(
                color: Colors.brown.withValues(alpha: 0.1),
                borderRadius: BorderRadius.circular(12),
              ),
              child: const Text(
                'üí∞ PIX',
                style: TextStyle(
                  fontSize: 12,
                  color: Colors.brown,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            // √çcone animado da pa√ßoca
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.brown.withValues(alpha: 0.1),
                shape: BoxShape.circle,
              ),
              child: const Text(
                'ü•ú',
                style: TextStyle(fontSize: 48),
              ),
            ),

            const SizedBox(height: 16),

            const Text(
              'Adoro pa√ßocas e cafezinhos!',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
              textAlign: TextAlign.center,
            ),

            const SizedBox(height: 8),

            const Text(
              'Apoie o desenvolvimento do app com qualquer valor! üöÄ',
              style: TextStyle(fontSize: 14),
              textAlign: TextAlign.center,
            ),

            const SizedBox(height: 8),

            const Text(
              '(Cada pa√ßoca nos motiva a continuar!)',
              style: TextStyle(
                fontSize: 12,
                fontStyle: FontStyle.italic,
                color: Colors.grey,
              ),
              textAlign: TextAlign.center,
            ),

            const SizedBox(height: 20),

            // Container com o PIX
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.grey.shade100,
                borderRadius: BorderRadius.circular(12),
                border: Border.all(color: Colors.grey.shade300),
              ),
              child: Column(
                children: [
                  Row(
                    children: [
                      Icon(Icons.pix, color: Colors.blue.shade700),
                      const SizedBox(width: 8),
                      const Text(
                        'PIX:',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          color: Colors.black87,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  SelectableText(
                    'lucianofloripa@outlook.com',
                    style: TextStyle(
                      fontSize: 12,
                      fontFamily: 'monospace',
                      color: Colors.blue.shade700,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
            ),

            const SizedBox(height: 12),

            // Aviso divertido
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.amber.withValues(alpha: 0.1),
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.amber.withValues(alpha: 0.3)),
              ),
              child: Row(
                children: [
                  const Text('‚ö†Ô∏è', style: TextStyle(fontSize: 16)),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      ('I love pa√ßocas, mas n√£o sou rico! Qualquer valor √© bem-vindo! ü•ú'),
                      style: TextStyle(
                        fontSize: 11,
                        color: Colors.amber.shade700,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('üö™ Sair sem pagar'),
          ),
          ElevatedButton.icon(
            onPressed: () => _copyPixToClipboard(),
            icon: const Icon(Icons.content_copy, size: 18),
            label: const Text('üìã Copiar PIX'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.brown,
              foregroundColor: Colors.white,
            ),
          ),
        ],
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16),
        ),
      ),
    );
  }

// ‚úÖ M√âTODO PARA COPIAR O PIX (ADICIONAR AP√ìS _showPacoca):
  Future<void> _copyPixToClipboard() async {
    const String pixKey = 'lucianofloripa@outlook.com';

    try {
      await Clipboard.setData(const ClipboardData(text: pixKey));

      // Fechar o dialog primeiro
      Navigator.pop(context);

      // Mostrar confirma√ß√£o com estilo
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Row(
              children: [
                Container(
                  padding: const EdgeInsets.all(6),
                  decoration: BoxDecoration(
                    color: Colors.white.withValues(alpha: 0.2),
                    shape: BoxShape.circle,
                  ),
                  child: const Text('ü•ú', style: TextStyle(fontSize: 16)),
                ),
                const SizedBox(width: 12),
                const Expanded(
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'üìã PIX copiado com sucesso!',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                        ),
                      ),
                      Text(
                        'Cole no seu app de pagamentos',
                        style: TextStyle(
                          fontSize: 12,
                          color: Colors.white70,
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
            backgroundColor: Colors.brown,
            duration: const Duration(seconds: 4),
            behavior: SnackBarBehavior.floating,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
            action: SnackBarAction(
              label: 'ü•ú Valeu!',
              textColor: Colors.white,
              onPressed: () {
                // Fechar o SnackBar
              },
            ),
          ),
        );
      }

      // Vibra√ß√£o de sucesso
      HapticFeedback.lightImpact();
    } catch (e) {
      // Em caso de erro
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Row(
              children: [
                Icon(Icons.error_outline, color: Colors.white),
                SizedBox(width: 8),
                Text('‚ùå Erro ao copiar PIX'),
              ],
            ),
            backgroundColor: Colors.red,
            duration: Duration(seconds: 2),
          ),
        );
      }
    }
  }

  @override
  void dispose() {
    _slideController.dispose();
    _bounceController.dispose();
    _murphyController.dispose();
    super.dispose();
  }
}

// üìã CLASSE DE DADOS PARA ITEMS DO MENU
class _MenuItemData {
  final IconData icon;
  final String title;
  final String subtitle;
  final String? route;
  final VoidCallback? onTap;
  final Color color;

  _MenuItemData({
    required this.icon,
    required this.title,
    required this.subtitle,
    this.route,
    this.onTap,
    required this.color,
  });
}
